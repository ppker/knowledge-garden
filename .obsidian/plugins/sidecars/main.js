/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames;var __hasOwnProp=Object.prototype.hasOwnProperty;var __name=(target,value)=>__defProp(target,"name",{value,configurable:!0});var __export=(target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],enumerable:!0})},__copyProps=(to,from,except,desc)=>{if(from&&typeof from=="object"||typeof from=="function")for(let key of __getOwnPropNames(from))!__hasOwnProp.call(to,key)&&key!==except&&__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});return to};var __toCommonJS=mod=>__copyProps(__defProp({},"__esModule",{value:!0}),mod);var main_exports={};__export(main_exports,{default:()=>SidecarPlugin});module.exports=__toCommonJS(main_exports);function getExtension(filePath){let lastDot=filePath.lastIndexOf(".");return lastDot===-1||lastDot===0||lastDot===filePath.length-1?"":filePath.substring(lastDot+1).toLowerCase()}__name(getExtension,"getExtension");function getDirname(filePath){let lastSlash=filePath.lastIndexOf("/");return lastSlash===-1?"":filePath.substring(0,lastSlash)}__name(getDirname,"getDirname");function getBasename(filePath){let lastSlash=filePath.lastIndexOf("/");return filePath.substring(lastSlash+1)}__name(getBasename,"getBasename");function joinPath(dir,file){return dir?dir.endsWith("/")?dir+file:dir+"/"+file:file}__name(joinPath,"joinPath");function userPatternToRegex(pattern,useRegex){let orig=pattern.trim();if(!orig)return"";if(useRegex)return orig;let pat=orig.replace(/([.+?^${}()|[\\]\\])/g,"\\$1");return pat=pat.replace(/\*/g,".*"),pat.startsWith("/")?pat="^"+pat.slice(1):pat=".*"+pat,pat.endsWith("/")&&(pat=pat+".*"),orig.startsWith("/")||(pat=pat.replace(/\//g,"(?:/|^)")),pat}__name(userPatternToRegex,"userPatternToRegex");function isPathInFolderList(filePath,folderList,useRegex=!1){if(!folderList||folderList.length===0)return!1;let normalized=filePath.replace(/\\/g,"/");return folderList.some(pattern=>{let regexStr=userPatternToRegex(pattern,useRegex);if(!regexStr)return!1;try{return new RegExp(regexStr).test(normalized)}catch(e){return!1}})}__name(isPathInFolderList,"isPathInFolderList");function isFileAllowedByFolderLists(filePath,settings){let{blacklistFolders,whitelistFolders,useRegexForFolderLists}=settings;return!(whitelistFolders&&whitelistFolders.length>0&&!isPathInFolderList(filePath,whitelistFolders,useRegexForFolderLists)||blacklistFolders&&blacklistFolders.length>0&&isPathInFolderList(filePath,blacklistFolders,useRegexForFolderLists))}__name(isFileAllowedByFolderLists,"isFileAllowedByFolderLists");function toPosixPath(path){return path.replace(/\\/g,"/")}__name(toPosixPath,"toPosixPath");var logHistory=[],config={namespaceOverride:null,debugColors:{debug:"#7B68EE",info:"#4169E1",warn:"#FF8C00",error:"#DC143C"},defaultLogLevel:"error",globalNamespace:null,currentLogLevel:"error",debugEnabled:!1,formatTemplate:"[{namespace}] {class}.{method}: {message}",callbackFormatTemplate:"[{namespace}] {class} (callback): {message}",messageColor:"#ffffff",pluginIdForStackParsing:null};function initLogger(plugin){config.globalNamespace=plugin.manifest.id,config.pluginIdForStackParsing=plugin.manifest.id}__name(initLogger,"initLogger");function getNamespace(){return config.namespaceOverride?config.namespaceOverride:config.globalNamespace||"obsidian-plugin"}__name(getNamespace,"getNamespace");function getLoggerPluginIdForStackParsing(){return config.pluginIdForStackParsing}__name(getLoggerPluginIdForStackParsing,"getLoggerPluginIdForStackParsing");function getFormatTemplate(){return config.formatTemplate}__name(getFormatTemplate,"getFormatTemplate");function getCallbackFormatTemplate(){return config.callbackFormatTemplate}__name(getCallbackFormatTemplate,"getCallbackFormatTemplate");function getConfig(){return config}__name(getConfig,"getConfig");function addLogEntry(entry){logHistory.push(entry),logHistory.length>1e3&&logHistory.shift()}__name(addLogEntry,"addLogEntry");function getLogHistory(namespace){return namespace?logHistory.filter(entry=>entry.namespace===namespace):[...logHistory]}__name(getLogHistory,"getLogHistory");function clearLogHistory(namespace){if(namespace){let originalLength=logHistory.length,newLength=0;for(let i=originalLength-1;i>=0;i--)logHistory[i].namespace===namespace?logHistory.splice(i,1):newLength++}else logHistory.length=0}__name(clearLogHistory,"clearLogHistory");var classNameMap=new WeakMap;function registerLoggerClass(instance,originalName){instance&&originalName&&(classNameMap.set(instance,originalName),instance.constructor&&instance.constructor!==instance&&classNameMap.set(instance.constructor,originalName))}__name(registerLoggerClass,"registerLoggerClass");function getRegisteredClassName(instance){return instance?classNameMap.has(instance)?classNameMap.get(instance)||null:instance.constructor&&classNameMap.has(instance.constructor)&&classNameMap.get(instance.constructor)||null:null}__name(getRegisteredClassName,"getRegisteredClassName");function extractClassAndMethod(name){if(!name)return{};if(name.includes(".")){let parts=name.split("."),methodName=parts.pop();return{className:parts.join("."),methodName}}return{methodName:name}}__name(extractClassAndMethod,"extractClassAndMethod");function isMeaningfulContext(name){return!(!name||name.length<1||["eval","anonymous","apply","call","constructor"].includes(name.toLowerCase())||name==="Object")}__name(isMeaningfulContext,"isMeaningfulContext");function getCallerInfo(){try{let stack=new Error().stack;if(!stack)return{isCallback:!1};let lines=stack.split(`
`),pluginId=getLoggerPluginIdForStackParsing(),relevantLines=lines.slice(1).filter(line=>{let trimmed=line.trim();return!(trimmed.includes("getCallerInfo")||trimmed.includes("formatPrefix")||trimmed.includes("simple-debug")||trimmed.match(/at\s+(loggerDebug|loggerInfo|loggerWarn|loggerError|loggerLog)\s*\(/i)||pluginId&&!trimmed.includes(`(plugin:${pluginId}:`)&&!(trimmed.includes("at eval (")&&trimmed.includes(`(plugin:${pluginId}:`))&&trimmed.includes("at eval ("))}),stackLineRegex=/\s*at\s+(?:new\s+)?([A-Za-z0-9_$.]+(?:\s+\[as\s+[A-Za-z0-9_$.]+])?)/;for(let line of relevantLines){let trimmedLine=line.trim();if(!trimmedLine)continue;let match=trimmedLine.match(stackLineRegex);if(match&&match[1]){let potentialContext=match[1],asAliasMatch=potentialContext.match(/(.*)\s+\[as\s+.*]/);asAliasMatch&&asAliasMatch[1]&&(potentialContext=asAliasMatch[1]);let{className,methodName}=extractClassAndMethod(potentialContext);if(isMeaningfulContext(methodName)||isMeaningfulContext(className)){let isEvalCallback=trimmedLine.toLowerCase().includes("at eval"),isGenericCallbackHint=(methodName==null?void 0:methodName.toLowerCase().includes("callback"))||(className==null?void 0:className.toLowerCase().includes("callback"))||(methodName==null?void 0:methodName.toLowerCase().startsWith("_on"))||trimmedLine.toLowerCase().includes("eventemitter")||trimmedLine.toLowerCase().includes(".emit");return methodName==="eval"&&!className?{isCallback:!0}:{className,methodName,isCallback:isEvalCallback||isGenericCallbackHint}}}}}catch(e){console.error("Error in getCallerInfo:",e)}return{isCallback:!1}}__name(getCallerInfo,"getCallerInfo");function formatPrefixCustom(component,contextInstance,message){var _a,_b,_c,_d,_e,_f,_g,_h,_i,_j,_k;let namespace=getNamespace(),derivedClassName=null,derivedMethodName=null,isCallbackContext=!1,callerInfo=getCallerInfo();if(isCallbackContext=callerInfo.isCallback,contextInstance?(derivedClassName=getRegisteredClassName(contextInstance),callerInfo.methodName&&!isCallbackContext?(derivedMethodName=(_a=callerInfo.methodName)!=null?_a:null,callerInfo.className&&callerInfo.className):callerInfo.methodName&&isCallbackContext&&!derivedClassName&&(derivedClassName=(_b=callerInfo.className)!=null?_b:null,derivedMethodName=(_c=callerInfo.methodName)!=null?_c:null)):component?(derivedClassName=component,derivedMethodName=(_d=callerInfo.methodName)!=null?_d:null,callerInfo.className&&callerInfo.className!==derivedClassName&&!callerInfo.methodName||callerInfo.className&&callerInfo.methodName):(derivedClassName=(_e=callerInfo.className)!=null?_e:null,derivedMethodName=(_f=callerInfo.methodName)!=null?_f:null),!derivedClassName&&callerInfo.className&&!callerInfo.methodName?derivedMethodName=(_g=callerInfo.className)!=null?_g:null:!derivedClassName&&callerInfo.className&&callerInfo.methodName&&(derivedClassName=(_h=callerInfo.className)!=null?_h:null,derivedMethodName=(_i=callerInfo.methodName)!=null?_i:null),derivedClassName&&!derivedMethodName&&derivedClassName.includes(".")){let parts=derivedClassName.split(".");derivedMethodName=(_j=parts.pop())!=null?_j:null,derivedClassName=parts.join(".")}if(!derivedClassName&&derivedMethodName&&derivedMethodName.includes(".")){let parts=derivedMethodName.split(".");derivedClassName=(_k=parts.shift())!=null?_k:null,derivedMethodName=parts.join(".")}derivedMethodName&&(derivedMethodName.toLowerCase().includes("callback")||derivedMethodName.toLowerCase().startsWith("_on"))&&(isCallbackContext=!0);let template=isCallbackContext?getCallbackFormatTemplate():getFormatTemplate(),result=template.replace("{namespace}",namespace).replace("{class}",derivedClassName||"").replace("{message}",message||"");return template.includes("{method}")&&(result=result.replace("{method}",derivedMethodName||"")),result.replace(/\s\s+/g," ").trim()}__name(formatPrefixCustom,"formatPrefixCustom");function formatPrefixOnly(component,contextInstance){var _a,_b,_c,_d,_e,_f,_g,_h,_i,_j;let namespace=getNamespace(),derivedClassName=null,derivedMethodName=null,isCallbackContext=!1,callerInfo=getCallerInfo();if(isCallbackContext=callerInfo.isCallback,contextInstance?(derivedClassName=getRegisteredClassName(contextInstance),callerInfo.methodName&&!isCallbackContext?derivedMethodName=(_a=callerInfo.methodName)!=null?_a:null:callerInfo.methodName&&isCallbackContext&&!derivedClassName&&(derivedClassName=(_b=callerInfo.className)!=null?_b:null)):component?(derivedClassName=component,derivedMethodName=(_c=callerInfo.methodName)!=null?_c:null):(derivedClassName=(_d=callerInfo.className)!=null?_d:null,derivedMethodName=(_e=callerInfo.methodName)!=null?_e:null),!derivedClassName&&callerInfo.className&&!callerInfo.methodName?derivedMethodName=(_f=callerInfo.className)!=null?_f:null:!derivedClassName&&callerInfo.className&&callerInfo.methodName&&(derivedClassName=(_g=callerInfo.className)!=null?_g:null,derivedMethodName=(_h=callerInfo.methodName)!=null?_h:null),derivedClassName&&!derivedMethodName&&derivedClassName.includes(".")){let parts=derivedClassName.split(".");derivedMethodName=(_i=parts.pop())!=null?_i:null,derivedClassName=parts.join(".")}if(!derivedClassName&&derivedMethodName&&derivedMethodName.includes(".")){let parts=derivedMethodName.split(".");derivedClassName=(_j=parts.shift())!=null?_j:null,derivedMethodName=parts.join(".")}derivedMethodName&&(derivedMethodName.toLowerCase().includes("callback")||derivedMethodName.toLowerCase().startsWith("_on"))&&(isCallbackContext=!0);let template=isCallbackContext?getCallbackFormatTemplate():getFormatTemplate(),result=template.replace("{namespace}",namespace).replace("{class}",derivedClassName||"");return template.includes("{method}")&&(result=result.replace("{method}",derivedMethodName||"")),result=result.replace("{message}","").trim(),result.replace(/\s\s+/g," ").trim()}__name(formatPrefixOnly,"formatPrefixOnly");function safeStringify(obj,maxDepth=3){let seen=new WeakSet;function stringifyWithCircularCheck(value,depth=0){if(value===null)return"null";if(value===void 0)return"undefined";if(typeof value!="object")return String(value);if(seen.has(value))return"[Circular]";seen.add(value);try{if(Array.isArray(value))return depth>=maxDepth?"[Array...]":`[${value.slice(0,5).map(item=>stringifyWithCircularCheck(item,depth+1)).join(", ")}${value.length>5?`, ...${value.length-5} more`:""}]`;if(typeof value=="object"&&value!==null&&"nodeType"in value&&"nodeName"in value){let element=value;return`<${element.nodeName.toLowerCase()}${element.id?` id="${element.id}"`:""}${element.className?` class="${element.className}"`:""}>`}if(depth>=maxDepth)return"[Object...]";try{let jsonResult=JSON.stringify(value);if(jsonResult&&jsonResult!=="{}"&&jsonResult.length<500)return jsonResult}catch(jsonError){}let valueAsObject=value;if(typeof valueAsObject.constructor=="function"&&valueAsObject.constructor.name&&valueAsObject.constructor.name!=="Object"&&valueAsObject.constructor.name!=="Function"){let className=valueAsObject.constructor.name,keyProps=[],valueWithKeys=value;for(let key of["name","id","type","status","length"])if(key in valueWithKeys&&typeof valueWithKeys[key]!="object"&&typeof valueWithKeys[key]!="function"&&(keyProps.push(`${key}: ${String(valueWithKeys[key])}`),keyProps.length>=3))break;return`${className}${keyProps.length>0?` {${keyProps.join(", ")}}`:""}`}let registeredName=getRegisteredClassName(value);if(registeredName){let keyProps=[],valueWithKeys=value;for(let key of["name","id","type","status","length"])if(key in valueWithKeys&&typeof valueWithKeys[key]!="object"&&typeof valueWithKeys[key]!="function"&&(keyProps.push(`${key}: ${String(valueWithKeys[key])}`),keyProps.length>=3))break;return`${registeredName}${keyProps.length>0?` {${keyProps.join(", ")}}`:""}`}let valueAsRecord=value,keys=Object.keys(valueAsRecord);if(keys.length===0)return"{}";let props=(keys.length<=5?keys:keys.slice(0,5)).map(key=>{try{let val=stringifyWithCircularCheck(valueAsRecord[key],depth+1);return`${/^[a-zA-Z_$][a-zA-Z0-9_$]*$/.test(key)?key:`"${key}"`}: ${val}`}catch(e){return`${key}: [Error]`}}),ellipsis=keys.length>5?", ...":"";return`{${props.join(", ")}${ellipsis}}`}catch(e){return"[Object]"}finally{seen.delete(value)}}return __name(stringifyWithCircularCheck,"stringifyWithCircularCheck"),stringifyWithCircularCheck(obj)}__name(safeStringify,"safeStringify");function shouldLog(level){var _a;if(typeof window=="undefined")return!1;if(level==="error")return!0;try{let namespace=getNamespace(),nsController=(_a=window.DEBUG)==null?void 0:_a[namespace];if(!(nsController!=null&&nsController.enabled()))return!1;let currentLevel=nsController.getLevel();if(!currentLevel)return!1;let levels={error:0,warn:1,info:2,debug:3};return levels[level]<=levels[currentLevel]}catch(e){return!1}}__name(shouldLog,"shouldLog");function parseLogArgs(args){let component,contextInstance,logArgs=args;return args.length>1&&(typeof args[0]=="string"&&!args[0].includes(" ")?(component=args[0],logArgs=args.slice(1)):typeof args[0]=="object"&&args[0]!==null&&(contextInstance=args[0],logArgs=args.slice(1))),{component,contextInstance,logArgs}}__name(parseLogArgs,"parseLogArgs");function loggerLog(level,...args){if(!shouldLog(level))return;let{component,contextInstance,logArgs}=parseLogArgs(args),prefixOnly,messageStr,className,methodName;if(component&&logArgs.length>0&&typeof logArgs[0]=="string"&&/^[A-Za-z_$][A-Za-z0-9_$]*$/.test(logArgs[0])){let methodOverride=logArgs[0],remaining=logArgs.slice(1);prefixOnly=formatPrefixCustom(component,methodOverride),messageStr=remaining.map(arg=>typeof arg=="object"&&arg!==null?safeStringify(arg):String(arg)).join(" "),className=component,methodName=methodOverride}else{messageStr=logArgs.map(arg=>typeof arg=="object"&&arg!==null?safeStringify(arg):String(arg)).join(" "),prefixOnly=formatPrefixOnly(component,contextInstance);let callerInfo=getCallerInfo();className=component||callerInfo.className,methodName=callerInfo.methodName}let namespace=getNamespace(),formattedMessage=`${prefixOnly} ${messageStr}`;addLogEntry({timestamp:new Date,level,namespace,className,methodName,message:messageStr,args:logArgs,formattedMessage});let colors=getConfig().debugColors,messageColor=getConfig().messageColor,prefixStyle=`color:${colors[level]};font-weight:bold;`,messageStyle=`color:${messageColor};font-weight:normal;`,consoleMethods={debug:console.debug,info:console.info,warn:console.warn,error:console.error};messageStr?consoleMethods[level](`%c${prefixOnly} %c${messageStr}`,prefixStyle,messageStyle):consoleMethods[level](`%c${prefixOnly}`,prefixStyle)}__name(loggerLog,"loggerLog");function loggerDebug(...args){loggerLog("debug",...args)}__name(loggerDebug,"loggerDebug");function loggerInfo(...args){loggerLog("info",...args)}__name(loggerInfo,"loggerInfo");function loggerWarn(...args){loggerLog("warn",...args)}__name(loggerWarn,"loggerWarn");function loggerError(...args){loggerLog("error",...args)}__name(loggerError,"loggerError");function simplifyPath(text){let pathPatterns=[/(?:[A-Za-z]:\\\\|\\\\\\\\[^\\]+\\\\[^\\]+\\\\)(?:[^\\\/\n\r\t<>":|?*]+\\\\)*([^\\\/\n\r\t<>":|?*]+\\\\[^\\\/\n\r\t<>":|?*]+)/g,/(?:[A-Za-z]:\\|\\\\[^\\]+\\[^\\]+\\)(?:[^\\\/\n\r\t<>":|?*]+[\\\/])*([^\\\/\n\r\t<>":|?*]+[\\\/][^\\\/\n\r\t<>":|?*]+)/g,/(?:^|[\s(])(\/(?:[^\/\n\r\t<>":|?*]+\/)*[^\/\n\r\t<>":|?*]+\/[^\/\n\r\t<>":|?*]+)/g,/(?:^|[\s(])(\.\.\?\/)(?:[^\/\n\r\t<>":|?*]+\/)*([^\/\n\r\t<>":|?*]+\/[^\/\n\r\t<>":|?*]+)/g],result=text;return result=result.replace(pathPatterns[0],match=>{let segments=match.split("\\\\").filter(s=>s.length>0);return segments.length>=2?`.../${segments.slice(-2).join("/")}`:match}),result=result.replace(pathPatterns[1],match=>{let segments=match.split(/[\\\/]/).filter(s=>s.length>0);return segments.length>=2?`.../${segments.slice(-2).join("/")}`:match}),result=result.replace(pathPatterns[2],match=>{var _a,_b;let segments=match.trim().split("/").filter(s=>s.length>0);if(segments.length>=2){let lastTwo=segments.slice(-2).join("/");return`${(_b=(_a=match.match(/^(\s*)/))==null?void 0:_a[1])!=null?_b:""}.../${lastTwo}`}return match}),result=result.replace(pathPatterns[3],match=>{var _a,_b,_c,_d;let leadingSpace=(_b=(_a=match.match(/^(\s*)/))==null?void 0:_a[1])!=null?_b:"",relativePart=(_d=(_c=match.match(/(\.\.\?\/?)/))==null?void 0:_c[1])!=null?_d:"./",segments=match.substring(leadingSpace.length+relativePart.length).split("/").filter(s=>s.length>0);if(segments.length>=2){let lastTwo=segments.slice(-2).join("/");return`${leadingSpace}${relativePart}.../${lastTwo}`}return match}),result}__name(simplifyPath,"simplifyPath");function initializeDebugSystem(){if(typeof window!="undefined")try{let preExistingDebug=window.DEBUG,currentPluginNamespace=getNamespace(),loggerDebugAPI={enable(level="debug"){let config2=getConfig();return config2.debugEnabled=!0,config2.currentLogLevel=level,`Debug enabled for "${currentPluginNamespace}" at level: ${level.toUpperCase()}`},disable(){let config2=getConfig();return config2.debugEnabled=!1,config2.currentLogLevel="error",`Debug disabled for "${currentPluginNamespace}" (errors still visible)`},enabled(){return getConfig().debugEnabled},setLevel(level){let config2=getConfig();return config2.currentLogLevel=level,!config2.debugEnabled&&level!=="error"&&(config2.debugEnabled=!0),`Log level set to ${level.toUpperCase()} for plugin: ${currentPluginNamespace}`},getLevel(){let config2=getConfig();return config2.debugEnabled?config2.currentLogLevel:null},copyLogs(options={}){let{namespace=currentPluginNamespace,count=50,includeNamespace=!1,stripClass=!1,stripMethod=!1,includeTimestamp=!0,stripLogLevel=!0,simplifyPaths=!0,format="full",customTemplate}=options,logs=getLogHistory(namespace).slice(-count);if(logs.length===0)return"No logs found for the specified namespace.";let output;switch(format){case"message-only":output=logs.map(log=>log.message).join(`
`);break;case"prefix-only":output=logs.map(log=>{let prefix=`[${log.namespace}]`;return log.className&&!stripClass&&(prefix+=` ${log.className}`),log.methodName&&!stripMethod&&(prefix+=`.${log.methodName}`),prefix}).join(`
`);break;case"custom":customTemplate?output=logs.map(log=>customTemplate.replace("{timestamp}",log.timestamp.toISOString()).replace("{level}",log.level.toUpperCase()).replace("{namespace}",log.namespace).replace("{class}",log.className||"").replace("{method}",log.methodName||"").replace("{message}",log.message)).join(`
`):output=logs.map(log=>log.formattedMessage).join(`
`);break;case"full":default:output=logs.map(log=>{let line=log.formattedMessage;if(includeTimestamp&&(line=line.replace(/^\s*[\[\(]?\d{2,4}[-/]\d{1,2}[-/]\d{1,2}[T\s]\d{1,2}:\d{1,2}(:\d{1,2})?(\.\d+)?([Zz]|[+-]\d{2}:?\d{2})?[\])]?\s*/,"")),stripLogLevel){let lvlPrefix=`[${log.level.toUpperCase()}]`;line.startsWith(lvlPrefix)&&(line=line.slice(lvlPrefix.length).trimStart())}if(!includeNamespace){let nsPrefix=`[${log.namespace}]`;line.startsWith(nsPrefix)&&(line=line.slice(nsPrefix.length).trimStart())}return stripClass&&log.className&&(line=line.replace(new RegExp(`${log.className.replace(/[.*+?^${}()|[\]\\]/g,"\\\\$&")}\\.?\\s*`,"i"),"")),stripMethod&&log.methodName&&(line=line.replace(new RegExp(`${log.methodName.replace(/[.*+?^${}()|[\]\\]/g,"\\\\$&")}\\s*`,"i"),"")),line.trim()}).join(`
`);break}simplifyPaths&&(output=simplifyPath(output));let logStringToCopy=output;return navigator.clipboard&&typeof navigator.clipboard.writeText=="function"?(navigator.clipboard.writeText(logStringToCopy).then(()=>{}).catch(err=>{console.error("Logger: Failed to automatically copy logs to clipboard:",err)}),`Copied ${logStringToCopy.split(`
`).length} log line(s) to clipboard.`):(console.warn("Logger: Clipboard API (navigator.clipboard.writeText) is not available in this environment. Logs cannot be copied automatically."),"Clipboard API not available. Logs could not be copied to clipboard automatically.")},clearLogs(ns){let targetNamespace=ns||currentPluginNamespace;return clearLogHistory(targetNamespace),`Logs cleared for namespace: ${targetNamespace}`}};(!window.DEBUG||typeof window.DEBUG!="object")&&(window.DEBUG={}),window.DEBUG[currentPluginNamespace]=loggerDebugAPI}catch(e){console.error("Failed to initialize or update debug system:",e),(!window.DEBUG||typeof window.DEBUG!="object")&&(window.DEBUG={})}}__name(initializeDebugSystem,"initializeDebugSystem");var import_obsidian11=require("obsidian");var import_obsidian=require("obsidian");var activeOrphanSidecarModal=null,OrphanSidecarModal=class extends import_obsidian.Modal{constructor(app,orphanSidecars,onAccept){activeOrphanSidecarModal&&activeOrphanSidecarModal.close();super(app);this.orphanSidecars=orphanSidecars,this.onAccept=onAccept,activeOrphanSidecarModal=this}onOpen(){let{contentEl,modalEl}=this;contentEl.empty(),modalEl.addClass("mod-orphan-sidecar-cleanup");let modalHeader=modalEl.querySelector(".modal-header");modalHeader&&modalHeader.createDiv("modal-title",el=>{el.textContent="Confirm orphan sidecar cleanup"}),contentEl.createEl("p",{text:"The following orphan sidecars will be deleted if you proceed:"});let list=contentEl.createEl("ul");this.orphanSidecars.forEach(path=>{let link=list.createEl("li").createEl("a",{text:path,href:`#${path}`});link.onclick=async e=>{e.preventDefault(),this.app&&this.app.closeAllModals?this.app.closeAllModals():document.querySelectorAll(".modal-container, .modal-bg").forEach(m=>m.remove());let file=this.app.vault.getAbstractFileByPath(path);if(file){let leaves=this.app.workspace.getLeavesOfType("markdown"),found=!1;for(let leaf of leaves)if(leaf.view&&leaf.view.file&&leaf.view.file.path===path){this.app.workspace.setActiveLeaf(leaf,{focus:!0}),found=!0;break}found||await this.app.workspace.getLeaf(!0).openFile(file,{active:!0})}this.close()}});let buttonRow=contentEl.createDiv("modal-button-container"),deleteBtn=buttonRow.createEl("button",{text:"Delete orphans"});deleteBtn.addClass("mod-cta"),deleteBtn.onclick=()=>{this.close(),this.onAccept()};let cancelBtn=buttonRow.createEl("button",{text:"Cancel"});cancelBtn.onclick=()=>this.close()}onClose(){this.contentEl.empty(),activeOrphanSidecarModal===this&&(activeOrphanSidecarModal=null)}};__name(OrphanSidecarModal,"OrphanSidecarModal");var import_obsidian5=require("obsidian");var import_obsidian2=require("obsidian");var AddFiletypeModal=class extends import_obsidian2.Modal{constructor(app,fileExt,onAccept){super(app);this.fileExt=fileExt,this.onAccept=onAccept}onOpen(){let{contentEl,modalEl}=this;contentEl.empty(),modalEl.addClass("mod-orphan-sidecar-cleanup");let modalHeader=modalEl.querySelector(".modal-header");modalHeader&&modalHeader.createDiv("modal-title",el=>{el.textContent="Add file type to monitored list"}),contentEl.createEl("p",{text:`The file type '.${this.fileExt}' is not currently monitored by the Sidecar plugin. Would you like to add it to the list of monitored file types?`});let buttonRow=contentEl.createDiv("modal-button-container"),addBtn=buttonRow.createEl("button",{text:"Add file type"});addBtn.addClass("mod-cta"),addBtn.onclick=()=>{this.close(),this.onAccept(this.fileExt)};let cancelBtn=buttonRow.createEl("button",{text:"Cancel"});cancelBtn.onclick=()=>this.close()}onClose(){this.contentEl.empty()}};__name(AddFiletypeModal,"AddFiletypeModal");var import_obsidian3=require("obsidian");var ConfirmDeleteAllSidecarsModal=class extends import_obsidian3.Modal{constructor(app,onAccept){super(app);this.onAccept=onAccept}onOpen(){let{contentEl,modalEl}=this;contentEl.empty(),modalEl.addClass("mod-sidecar-delete-all-confirm");let modalHeader=modalEl.querySelector(".modal-header");modalHeader&&modalHeader.createDiv("modal-title",el=>{el.textContent="Delete all sidecar files?"}),contentEl.createEl("p",{text:"Are you sure you want to delete all sidecar files in this vault? This cannot be undone and will remove all sidecar files managed by this plugin."});let buttonRow=contentEl.createDiv("modal-button-container"),deleteBtn=buttonRow.createEl("button",{text:"Delete all sidecars"});deleteBtn.addClass("mod-warning"),deleteBtn.onclick=()=>{this.onAccept(),this.close()};let cancelBtn=buttonRow.createEl("button",{text:"Cancel"});cancelBtn.onclick=()=>this.close()}};__name(ConfirmDeleteAllSidecarsModal,"ConfirmDeleteAllSidecarsModal");var import_obsidian4=require("obsidian");var ConfirmResetModal=class extends import_obsidian4.Modal{constructor(app,onAccept){super(app);this.onAccept=onAccept}onOpen(){let{contentEl,modalEl}=this;contentEl.empty(),modalEl.addClass("mod-sidecar-reset-confirm");let modalHeader=modalEl.querySelector(".modal-header");modalHeader&&modalHeader.createDiv("modal-title",el=>{el.textContent="Reset all settings to default?"}),contentEl.createEl("p",{text:"Are you sure you want to reset all Sidecar settings to their default values? This cannot be undone."});let buttonRow=contentEl.createDiv("modal-button-container");new import_obsidian4.Setting(buttonRow).addButton(btn=>btn.setButtonText("Reset to defaults").setClass("mod-warning").onClick(()=>{this.onAccept(),this.close()})).addButton(btn=>btn.setButtonText("Cancel").setClass("mod-cancel").onClick(()=>this.close()))}};__name(ConfirmResetModal,"ConfirmResetModal");var DEFAULT_SETTINGS={monitoredExtensions:[],sidecarSuffix:"side",blacklistFolders:[],whitelistFolders:[],hideSidecarsInExplorer:!1,useRegexForFolderLists:!1,dimSidecarsInExplorer:!0,prependSidecarIndicator:!1,revalidateOnStartup:!0,preventDraggingSidecars:!0,colorSidecarExtension:!0,hideMainExtensionInExplorer:!1,showActualExtension:!1,redirectFileSuffix:"redirect",hideRedirectFilesInExplorer:!0,showRedirectDecorator:!0,showRedirectDecoratorOnSidecars:!1,previewFileSuffix:"preview",hidePreviewFilesInExplorer:!1,showPreviewDecorator:!0,showPreviewDecoratorOnSidecars:!1,autoCreateSidecars:!0,hideSidecarBaseNameInExplorer:!1};var SettingsManager=class{constructor(plugin){this.plugin=plugin,this.settings=DEFAULT_SETTINGS}async loadSettings(){let loadedData=await this.plugin.loadData();this.settings=Object.assign({},DEFAULT_SETTINGS,loadedData),this.plugin.settings=this.settings}async saveSettings(){await this.plugin.saveData(this.settings)}getSettings(){return this.settings}getSettingTab(){return new SidecarPluginSettingTab(this.plugin.app,this.plugin)}async initialize(){this.plugin.addSettingTab(new SidecarPluginSettingTab(this.plugin.app,this.plugin))}async updateSetting(key,value){key==="sidecarSuffix"&&typeof value=="string"&&value.length>20&&loggerWarn(this,"Sidecar suffix exceeds recommended length",{key:String(key),length:value.length,maxRecommended:20});try{this.settings[key]=value,this.plugin.settings[key]=value,await this.plugin.saveSettings(),loggerInfo(this,"Setting successfully updated",{key:String(key),newValue:typeof value=="string"&&value.length>50?`${value.substring(0,50)}...`:value})}catch(updateError){throw loggerError(this,"Failed to update plugin setting",{key:String(key),error:updateError instanceof Error?updateError.message:String(updateError),attemptedValue:value}),updateError}}};__name(SettingsManager,"SettingsManager");var SidecarPluginSettingTab=class extends import_obsidian5.PluginSettingTab{constructor(app,plugin){super(app,plugin);this.plugin=plugin}display(){let{containerEl}=this;containerEl.empty(),new import_obsidian5.Setting(containerEl).setName("Sidecar file suffix").setDesc("The suffix to use for sidecar files. Don't include periods or the .md extension.").addText(text=>{text.setPlaceholder("side").setValue(this.plugin.settings.sidecarSuffix);let handleValidation=__name(async()=>{let currentValue=text.inputEl.value;currentValue.length>0&&!currentValue.includes(".")&&!currentValue.toLowerCase().includes("md")?this.plugin.settings.sidecarSuffix!==currentValue&&(await this.plugin.settingsManager.updateSetting("sidecarSuffix",currentValue),this.containerEl.querySelectorAll(".sidecar-tag-example").forEach(tag=>{tag instanceof HTMLElement&&(tag.textContent=this.plugin.settings.sidecarSuffix)})):(new import_obsidian5.Notice("Sidecar suffix must not be empty and cannot contain periods or 'md'."),text.setValue(this.plugin.settings.sidecarSuffix))},"handleValidation");text.inputEl.addEventListener("blur",async()=>{await handleValidation()}),text.inputEl.addEventListener("keydown",async event=>{event.key==="Enter"&&(event.preventDefault(),await handleValidation())})}),new import_obsidian5.Setting(containerEl).setName("Automatically create new sidecars").setDesc("If enabled, new sidecars will be created automatically for monitored files. If disabled, only existing sidecars will be managed. To manually create sidecars, use the context menu in the File Explorer.").addToggle(toggle=>toggle.setValue(this.plugin.settings.autoCreateSidecars).onChange(async value=>{await this.plugin.settingsManager.updateSetting("autoCreateSidecars",value)})),new import_obsidian5.Setting(containerEl).setName("Revalidate sidecars on startup").setDesc("Automatically re-scan all files and manage sidecars when Obsidian starts or the plugin is loaded.").addToggle(toggle=>toggle.setValue(this.plugin.settings.revalidateOnStartup).onChange(async value=>{await this.plugin.settingsManager.updateSetting("revalidateOnStartup",value)})),new import_obsidian5.Setting(containerEl).setName("Revalidate sidecars").setDesc("Manually re-scan all files to create missing sidecars and remove orphaned or invalid ones. This can be useful after bulk file operations or if you suspect inconsistencies.").addButton(button=>button.setButtonText("Revalidate now").setCta().onClick(()=>{new import_obsidian5.Notice("Starting sidecar revalidation..."),this.plugin.revalidateSidecars()})),new import_obsidian5.Setting(containerEl).setName("File types").setHeading(),new import_obsidian5.Setting(containerEl).setName("Manage image files").setDesc("Create and manage sidecars for image formats supported by Obsidian:").then(setting=>{let desc=setting.descEl,ex=document.createElement("div");ex.classList.add("sidecar-margin-top"),["avif","bmp","gif","jpeg","jpg","png","svg","webp"].forEach((ext,i,arr)=>{let code=document.createElement("code");code.textContent=ext,ex.appendChild(code),i<arr.length-1&&ex.appendChild(document.createTextNode(", "))}),desc.appendChild(ex),setting.addToggle(toggle=>toggle.setValue(!1).onChange(async value=>{if(value){let imageExts=["avif","bmp","gif","jpeg","jpg","png","svg","webp"],current=new Set(this.plugin.settings.monitoredExtensions.map(e=>e.toLowerCase())),changed=!1;for(let ext of imageExts)current.has(ext)||(this.plugin.settings.monitoredExtensions.push(ext),changed=!0);changed&&await this.plugin.settingsManager.updateSetting("monitoredExtensions",this.plugin.settings.monitoredExtensions)}}))}),new import_obsidian5.Setting(containerEl).setName("Manage video files").setDesc("Create and manage sidecars for video formats supported by Obsidian:").then(setting=>{let desc=setting.descEl,ex=document.createElement("div");ex.classList.add("sidecar-margin-top"),["mkv","mov","mp4","ogv","webm"].forEach((ext,i,arr)=>{let code=document.createElement("code");code.textContent=ext,ex.appendChild(code),i<arr.length-1&&ex.appendChild(document.createTextNode(", "))}),desc.appendChild(ex),setting.addToggle(toggle=>toggle.setValue(!1).onChange(async value=>{if(value){let videoExts=["mkv","mov","mp4","ogv","webm"],current=new Set(this.plugin.settings.monitoredExtensions.map(e=>e.toLowerCase())),changed=!1;for(let ext of videoExts)current.has(ext)||(this.plugin.settings.monitoredExtensions.push(ext),changed=!0);changed&&await this.plugin.settingsManager.updateSetting("monitoredExtensions",this.plugin.settings.monitoredExtensions)}}))}),new import_obsidian5.Setting(containerEl).setName("Manage audio files").setDesc("Create and manage sidecars for audio formats supported by Obsidian:").then(setting=>{let desc=setting.descEl,ex=document.createElement("div");ex.classList.add("sidecar-margin-top"),["flac","m4a","mp3","ogg","wav","webm","3gp"].forEach((ext,i,arr)=>{let code=document.createElement("code");code.textContent=ext,ex.appendChild(code),i<arr.length-1&&ex.appendChild(document.createTextNode(", "))}),desc.appendChild(ex),setting.addToggle(toggle=>toggle.setValue(!1).onChange(async value=>{if(value){let audioExts=["flac","m4a","mp3","ogg","wav","webm","3gp"],current=new Set(this.plugin.settings.monitoredExtensions.map(e=>e.toLowerCase())),changed=!1;for(let ext of audioExts)current.has(ext)||(this.plugin.settings.monitoredExtensions.push(ext),changed=!0);changed&&await this.plugin.settingsManager.updateSetting("monitoredExtensions",this.plugin.settings.monitoredExtensions)}}))}),new import_obsidian5.Setting(containerEl).setName("Extra file types").setDesc("List extra file types to manage (one per line).").then(setting=>{setting.controlEl.empty();let textarea=document.createElement("textarea");textarea.placeholder=`pdf
canvas`,textarea.value=this.plugin.settings.monitoredExtensions.join(`
`),textarea.addEventListener("change",async()=>{let extensions=textarea.value.split(/\r?\n/).map(item=>item.trim()).filter(item=>item.length>0).map(ext=>ext.replace(/^\./,"").toLowerCase());await this.plugin.settingsManager.updateSetting("monitoredExtensions",extensions)}),setting.controlEl.classList.add("multiple-text-component"),setting.controlEl.appendChild(textarea)}),new import_obsidian5.Setting(containerEl).setName("File Explorer behavior").setHeading(),new import_obsidian5.Setting(containerEl).setName("Prevent dragging of sidecar files").setDesc("If enabled, sidecar files cannot be dragged in the File Explorer. This helps prevent accidental moves.").addToggle(toggle=>toggle.setValue(this.plugin.settings.preventDraggingSidecars).onChange(async value=>{await this.plugin.settingsManager.updateSetting("preventDraggingSidecars",value)})),new import_obsidian5.Setting(containerEl).setName("Hide sidecar files").setDesc("Completely hide sidecar files in Obsidian's File Explorer.").addToggle(toggle=>{toggle.setValue(this.plugin.settings.hideSidecarsInExplorer).onChange(async value=>{await this.plugin.settingsManager.updateSetting("hideSidecarsInExplorer",value)})}),new import_obsidian5.Setting(containerEl).setName("Management scope").setHeading().setDesc((()=>{let fragment=document.createDocumentFragment();return fragment.createSpan({text:"Configure which folders are included or excluded from sidecar management. You can use vault-absolute paths (e.g. "}),fragment.appendChild(document.createElement("code")).textContent="/Templates/",fragment.appendChild(document.createTextNode(") or asterisk (")),fragment.appendChild(document.createElement("code")).textContent="*",fragment.appendChild(document.createTextNode(") wildcards. For more advanced control, an option to use full regex syntax is provided at the bottom.")),fragment})()),new import_obsidian5.Setting(containerEl).setName("Blacklist folders").setDesc("List of folders to exclude from sidecar management. Exclusions take precedence over inclusions when resolving blacklist subfolders inside whitelist folders.").then(setting=>{setting.controlEl.empty();let textarea=document.createElement("textarea");textarea.placeholder=`/Templates/
*/archive/*`,textarea.value=(this.plugin.settings.blacklistFolders||[]).join(`
`),textarea.addEventListener("change",async()=>{let folders=textarea.value.split(/\r?\n/).map(item=>item.trim()).filter(item=>item.length>0);await this.plugin.settingsManager.updateSetting("blacklistFolders",folders)}),setting.controlEl.classList.add("multiple-text-component"),setting.controlEl.appendChild(textarea)}),new import_obsidian5.Setting(containerEl).setName("Whitelist folders").setDesc("List of folders to include for sidecar management. If set to at least one folder, only files in these folders will be managed.").then(setting=>{setting.controlEl.empty();let textarea=document.createElement("textarea");textarea.placeholder="*/attachments/*",textarea.value=(this.plugin.settings.whitelistFolders||[]).join(`
`),textarea.addEventListener("change",async()=>{let folders=textarea.value.split(/\r?\n/).map(item=>item.trim()).filter(item=>item.length>0);await this.plugin.settingsManager.updateSetting("whitelistFolders",folders)}),setting.controlEl.classList.add("multiple-text-component"),setting.controlEl.appendChild(textarea)}),new import_obsidian5.Setting(containerEl).setName("Use regular expressions for folder lists").setDesc((()=>{let frag=document.createDocumentFragment();return frag.append("If enabled, folder patterns are treated as full regular expressions (e.g. "),frag.appendChild(document.createElement("code")).textContent=".",frag.append(" and "),frag.appendChild(document.createElement("code")).textContent="^",frag.append(" are supported). If disabled, only "),frag.appendChild(document.createElement("code")).textContent="*",frag.append(" is supported as a wildcard for any depth (e.g. "),frag.appendChild(document.createElement("code")).textContent="*/Media/*",frag.append(" matches any Media folder at any depth)."),frag})()).addToggle(toggle=>toggle.setValue(this.plugin.settings.useRegexForFolderLists).onChange(async value=>{await this.plugin.settingsManager.updateSetting("useRegexForFolderLists",value)})),new import_obsidian5.Setting(containerEl).setName("File Explorer styles").setHeading(),new import_obsidian5.Setting(containerEl).setName("Dim sidecar files").setDesc("Visually dim sidecar files in the File Explorer.").addToggle(toggle=>{toggle.setValue(this.plugin.settings.dimSidecarsInExplorer).onChange(async value=>{await this.plugin.settingsManager.updateSetting("dimSidecarsInExplorer",value)})}),new import_obsidian5.Setting(containerEl).setName("Arrow indicators").setDesc((()=>{let frag=document.createDocumentFragment();return frag.append("Prepend "),frag.appendChild(document.createElement("code")).textContent="\u2BA1",frag.append(" to sidecar file names (visual only) and adjust padding to indicate the sidecar is a child of the main file."),frag})()).addToggle(toggle=>toggle.setValue(this.plugin.settings.prependSidecarIndicator).onChange(async value=>{await this.plugin.settingsManager.updateSetting("prependSidecarIndicator",value)})),new import_obsidian5.Setting(containerEl).setName("Colored sidecar extension").setDesc((()=>{let frag=document.createDocumentFragment();frag.append("Toggle coloring of the sidecar extension (e.g. ");let codeTag=document.createElement("span");return codeTag.className="nav-file-tag sidecar-tag sidecar-tag-example",codeTag.textContent=this.plugin.settings.sidecarSuffix,frag.appendChild(codeTag),frag.append(") in the File Explorer."),frag})()).addToggle(toggle=>toggle.setValue(this.plugin.settings.colorSidecarExtension).onChange(async value=>{await this.plugin.settingsManager.updateSetting("colorSidecarExtension",value)})),new import_obsidian5.Setting(containerEl).setName("Append actual file extensions").setDesc("Visually append the actual file extension (e.g. .md) to sidecars in the File Explorer.").addToggle(toggle=>toggle.setValue(this.plugin.settings.showActualExtension).onChange(async value=>{await this.plugin.settingsManager.updateSetting("showActualExtension",value)})),new import_obsidian5.Setting(containerEl).setName("Hide main file extension").setDesc((()=>{let frag=document.createDocumentFragment();frag.append("Hide the main file extension from sidecar items in the File Explorer, leaving only the ");let codeTag=document.createElement("span");return codeTag.className="nav-file-tag sidecar-tag sidecar-tag-example no-color",codeTag.textContent=this.plugin.settings.sidecarSuffix,frag.appendChild(codeTag),frag.append(" suffix."),frag})()).addToggle(toggle=>toggle.setValue(this.plugin.settings.hideMainExtensionInExplorer).onChange(async value=>{await this.plugin.settingsManager.updateSetting("hideMainExtensionInExplorer",value)})),new import_obsidian5.Setting(containerEl).setName("Hide base name of sidecar files").setDesc("If enabled, only the extension tags or arrow indicators will be visible for sidecar files. The base file name will be hidden (visual only).").addToggle(toggle=>{var _a;toggle.setValue((_a=this.plugin.settings.hideSidecarBaseNameInExplorer)!=null?_a:!1).onChange(async value=>{await this.plugin.settingsManager.updateSetting("hideSidecarBaseNameInExplorer",value)})});let blendVaultDetails=containerEl.createEl("details",{cls:"setting-item setting-item-heading setting-collapsible"}),blendVaultSummaryEl=blendVaultDetails.createEl("summary");blendVaultSummaryEl.createSpan({text:"Blend Vault integration",cls:"setting-item-name"});let blendVaultDesc=blendVaultSummaryEl.createDiv({cls:"setting-item-description"}),descFrag=document.createDocumentFragment();descFrag.appendText("Only relevant if you use the ");let link=descFrag.createEl("span",{text:"Blend Vault",cls:"external-link"});link.onclick=()=>{window.open("https://github.com/Alb-O/blend-vault","_blank")},descFrag.appendText(" addon for Blender, or other tools that care about redirect files or preview files."),blendVaultDesc.appendChild(descFrag);let blendVaultContainer=blendVaultDetails.createDiv();new import_obsidian5.Setting(blendVaultContainer).setName("Redirect files").setHeading(),new import_obsidian5.Setting(blendVaultContainer).setName("Redirect file suffix").setDesc("The suffix for redirect files. Don't include periods or the .md extension.").addText(text=>{var _a;text.setPlaceholder("redirect").setValue((_a=this.plugin.settings.redirectFileSuffix)!=null?_a:".redirect"),text.inputEl.addEventListener("blur",async()=>{await this.plugin.settingsManager.updateSetting("redirectFileSuffix",text.getValue())})}),new import_obsidian5.Setting(blendVaultContainer).setName("Hide redirect files").setDesc("Completely hide redirect files in Obsidian's File Explorer.").addToggle(toggle=>toggle.setValue(this.plugin.settings.hideRedirectFilesInExplorer).onChange(async value=>{await this.plugin.settingsManager.updateSetting("hideRedirectFilesInExplorer",value),this.plugin.app.workspace.trigger("css-change")})),new import_obsidian5.Setting(blendVaultContainer).setName("Show redirect file decorator").setDesc("Show a decorator icon at the beginning of file names when a redirect file exists for that file.").addToggle(toggle=>toggle.setValue(this.plugin.settings.showRedirectDecorator).onChange(async value=>{await this.plugin.settingsManager.updateSetting("showRedirectDecorator",value),this.plugin.app.workspace.trigger("css-change")})),new import_obsidian5.Setting(blendVaultContainer).setName("Show redirect decorator on sidecars").setDesc("Also show the redirect decorator on sidecar files themselves when their main file has a redirect file.").addToggle(toggle=>toggle.setValue(this.plugin.settings.showRedirectDecoratorOnSidecars).onChange(async value=>{await this.plugin.settingsManager.updateSetting("showRedirectDecoratorOnSidecars",value),this.plugin.app.workspace.trigger("css-change")})),new import_obsidian5.Setting(blendVaultContainer).setName("Preview files").setHeading(),new import_obsidian5.Setting(blendVaultContainer).setName("Preview file suffix").setDesc("The suffix for preview files. Don't include periods or file extensions.").addText(text=>{var _a;text.setPlaceholder("preview").setValue((_a=this.plugin.settings.previewFileSuffix)!=null?_a:".preview"),text.inputEl.addEventListener("blur",async()=>{await this.plugin.settingsManager.updateSetting("previewFileSuffix",text.getValue())})}),new import_obsidian5.Setting(blendVaultContainer).setName("Hide preview files").setDesc("Completely hide preview files in Obsidian's File Explorer.").addToggle(toggle=>toggle.setValue(this.plugin.settings.hidePreviewFilesInExplorer).onChange(async value=>{await this.plugin.settingsManager.updateSetting("hidePreviewFilesInExplorer",value),this.plugin.app.workspace.trigger("css-change")})),new import_obsidian5.Setting(containerEl).setName("Danger zone").setHeading(),new import_obsidian5.Setting(containerEl).setName("Reset all settings").setDesc("Restore all Sidecar settings to their default values. This cannot be undone.").addButton(button=>{button.setButtonText("Reset to defaults").onClick(()=>{new ConfirmResetModal(this.app,async()=>{Object.assign(this.plugin.settings,DEFAULT_SETTINGS),await this.plugin.saveSettings(),new import_obsidian5.Notice("Sidecar settings reset to defaults."),this.display(),loggerInfo(this,"All settings reset to default values")}).open()}),button.buttonEl.classList.add("sidecar-reset-destructive-text")}),new import_obsidian5.Setting(containerEl).setName("Delete all sidecar files").setDesc("Delete all sidecar files in this vault. This cannot be undone and will remove all sidecar files managed by this plugin.").addButton(button=>{button.setButtonText("Delete all sidecars").onClick(()=>{new ConfirmDeleteAllSidecarsModal(this.app,async()=>{let deleted=[],files=this.app.vault.getFiles();for(let file of files)if(this.plugin.isSidecarFile(file.path))try{await this.app.fileManager.trashFile(file),deleted.push(file.path)}catch(err){console.error(`Failed to delete sidecar file: ${file.path}`,err)}new import_obsidian5.Notice(`Deleted ${deleted.length} sidecar file(s).`),loggerInfo(this,`Deleted ${deleted.length} sidecar files`)}).open()}),button.buttonEl.classList.add("sidecar-reset-destructive-text")})}};__name(SidecarPluginSettingTab,"SidecarPluginSettingTab");function updateSidecarFileAppearance(plugin){plugin.sidecarAppearanceObserver&&(plugin.sidecarAppearanceObserver.disconnect(),plugin.sidecarAppearanceObserver=void 0);let styleUpdateTimeout=null,processNavItem=__name(el=>{let dataPath=el.getAttribute("data-path");if(!dataPath)return;let fullSidecarExtension="."+plugin.settings.sidecarSuffix+".md",isSidecar=dataPath.endsWith(fullSidecarExtension),innerContentEl=el.querySelector(".tree-item-inner");if(Array.from(el.querySelectorAll(".main-ext-tag, .sidecar-tag, .redirect-tag, .preview-tag")).forEach(tag=>tag.remove()),isSidecar){if(plugin.settings.preventDraggingSidecars?el.setAttribute("draggable","false"):el.removeAttribute("draggable"),innerContentEl&&(innerContentEl.textContent="",!plugin.settings.hideSidecarBaseNameInExplorer)){let sourceFilePath=dataPath.slice(0,-fullSidecarExtension.length),sourceFileName=sourceFilePath.substring(sourceFilePath.lastIndexOf("/")+1),dotIndex=sourceFileName.lastIndexOf("."),baseName=dotIndex!==-1?sourceFileName.slice(0,dotIndex):sourceFileName;innerContentEl.appendChild(document.createTextNode(baseName))}if(plugin.settings.showRedirectDecoratorOnSidecars&&plugin.sidecarMainFileHasRedirect(dataPath)){let titleEl=el.querySelector(".tree-item-inner");if(titleEl){let existingDecorator=el.querySelector(".redirect-decorator");existingDecorator&&existingDecorator.remove();let decoratorEl=document.createElement("span");decoratorEl.className="redirect-decorator",plugin.settings.dimSidecarsInExplorer&&decoratorEl.classList.add("dimmed"),plugin.settings.colorSidecarExtension&&decoratorEl.classList.add("accent-colored"),decoratorEl.title="Main file has a redirect file",titleEl.insertBefore(decoratorEl,titleEl.firstChild)}}else{let existingDecorator=el.querySelector(".redirect-decorator");existingDecorator&&existingDecorator.remove()}if(plugin.settings.showPreviewDecoratorOnSidecars&&plugin.sidecarMainFileHasPreview(dataPath)){let titleEl=el.querySelector(".tree-item-inner");if(titleEl){let existingDecorator=el.querySelector(".preview-decorator");existingDecorator&&existingDecorator.remove();let decoratorEl=document.createElement("span");decoratorEl.className="preview-decorator",plugin.settings.dimSidecarsInExplorer&&decoratorEl.classList.add("dimmed"),plugin.settings.colorSidecarExtension&&decoratorEl.classList.add("accent-colored"),decoratorEl.title="Main file has a preview file",titleEl.insertBefore(decoratorEl,titleEl.firstChild)}}else{let existingDecorator=el.querySelector(".preview-decorator");existingDecorator&&existingDecorator.remove()}if(!plugin.settings.hideMainExtensionInExplorer&&innerContentEl){let sourceFilePath=dataPath.slice(0,-fullSidecarExtension.length),sourceFileName=sourceFilePath.substring(sourceFilePath.lastIndexOf("/")+1),dotIndex=sourceFileName.lastIndexOf("."),mainExt=dotIndex!==-1?sourceFileName.slice(dotIndex+1):"";if(mainExt){let mainExtTag=document.createElement("div"),classList2="nav-file-tag main-ext-tag";plugin.settings.dimSidecarsInExplorer&&(classList2+=" dimmed"),plugin.settings.colorSidecarExtension===!1&&(classList2+=" no-color"),mainExtTag.className=classList2,mainExtTag.textContent=mainExt.toUpperCase(),el.appendChild(mainExtTag)}}let sidecarTagEl=document.createElement("div"),classList="nav-file-tag sidecar-tag";plugin.settings.dimSidecarsInExplorer&&(classList+=" dimmed"),plugin.settings.colorSidecarExtension===!1&&(classList+=" no-color"),sidecarTagEl.className=classList,sidecarTagEl.textContent=plugin.settings.sidecarSuffix+(plugin.settings.showActualExtension?".md":""),el.appendChild(sidecarTagEl),el.getAttribute("draggable")==="false"&&el.removeAttribute("draggable")}let fullRedirectExtension=plugin.settings.redirectFileSuffix?"."+plugin.settings.redirectFileSuffix+".md":".redirect.md",isRedirect=dataPath.endsWith(fullRedirectExtension);if(isRedirect){if(plugin.settings.preventDraggingSidecars?el.setAttribute("draggable","false"):el.removeAttribute("draggable"),innerContentEl&&(innerContentEl.textContent="",!plugin.settings.hideSidecarBaseNameInExplorer)){let sourceFilePath=dataPath.slice(0,-fullRedirectExtension.length),sourceFileName=sourceFilePath.substring(sourceFilePath.lastIndexOf("/")+1),dotIndex=sourceFileName.lastIndexOf("."),baseName=dotIndex!==-1?sourceFileName.slice(0,dotIndex):sourceFileName;innerContentEl.appendChild(document.createTextNode(baseName))}if(!plugin.settings.hideMainExtensionInExplorer&&innerContentEl){let sourceFilePath=dataPath.slice(0,-fullRedirectExtension.length),sourceFileName=sourceFilePath.substring(sourceFilePath.lastIndexOf("/")+1),dotIndex=sourceFileName.lastIndexOf("."),mainExt=dotIndex!==-1?sourceFileName.slice(dotIndex+1):"";if(mainExt){let mainExtTag=document.createElement("div"),classList2="nav-file-tag main-ext-tag";plugin.settings.dimSidecarsInExplorer&&(classList2+=" dimmed"),plugin.settings.colorSidecarExtension===!1&&(classList2+=" no-color"),mainExtTag.className=classList2,mainExtTag.textContent=mainExt.toUpperCase(),el.appendChild(mainExtTag)}}let redirectTagEl=document.createElement("div"),classList="nav-file-tag redirect-tag";plugin.settings.dimSidecarsInExplorer&&(classList+=" dimmed"),plugin.settings.colorSidecarExtension===!1&&(classList+=" no-color"),redirectTagEl.className=classList,redirectTagEl.textContent=plugin.settings.redirectFileSuffix+(plugin.settings.showActualExtension?".md":""),el.appendChild(redirectTagEl),el.getAttribute("draggable")==="false"&&el.removeAttribute("draggable")}let isPreview=plugin.isPreviewFile(dataPath);if(isPreview){if(plugin.settings.preventDraggingSidecars?el.setAttribute("draggable","false"):el.removeAttribute("draggable"),innerContentEl&&(innerContentEl.textContent="",!plugin.settings.hideSidecarBaseNameInExplorer)){let sourceFilePath=plugin.getSourcePathFromPreview(dataPath);if(sourceFilePath){let sourceFileName=sourceFilePath.substring(sourceFilePath.lastIndexOf("/")+1),dotIndex=sourceFileName.lastIndexOf("."),baseName=dotIndex!==-1?sourceFileName.slice(0,dotIndex):sourceFileName;innerContentEl.appendChild(document.createTextNode(baseName))}}if(!plugin.settings.hideMainExtensionInExplorer&&innerContentEl){let sourceFilePath=plugin.getSourcePathFromPreview(dataPath);if(sourceFilePath){let sourceFileName=sourceFilePath.substring(sourceFilePath.lastIndexOf("/")+1),dotIndex=sourceFileName.lastIndexOf("."),mainExt=dotIndex!==-1?sourceFileName.slice(dotIndex+1):"";if(mainExt){let mainExtTag=document.createElement("div"),classList2="nav-file-tag main-ext-tag";plugin.settings.dimSidecarsInExplorer&&(classList2+=" dimmed"),plugin.settings.colorSidecarExtension===!1&&(classList2+=" no-color"),mainExtTag.className=classList2,mainExtTag.textContent=mainExt.toUpperCase(),el.appendChild(mainExtTag)}}}let previewTagEl=document.createElement("div"),classList="nav-file-tag preview-tag";plugin.settings.dimSidecarsInExplorer&&(classList+=" dimmed"),plugin.settings.colorSidecarExtension===!1&&(classList+=" no-color"),previewTagEl.className=classList;let actualExt=dataPath.substring(dataPath.lastIndexOf(".")+1);previewTagEl.textContent=plugin.settings.previewFileSuffix+(plugin.settings.showActualExtension?"."+actualExt.toUpperCase():""),el.appendChild(previewTagEl),el.getAttribute("draggable")==="false"&&el.removeAttribute("draggable")}if(!isSidecar&&!isRedirect&&!isPreview&&plugin.settings.showRedirectDecorator)if(plugin.hasRedirectFile(dataPath)){let titleEl=el.querySelector(".tree-item-inner");if(titleEl){let existingDecorator=el.querySelector(".redirect-decorator");existingDecorator&&existingDecorator.remove();let decoratorEl=document.createElement("span");decoratorEl.className="redirect-decorator",decoratorEl.title="This file has a redirect file",titleEl.insertBefore(decoratorEl,titleEl.firstChild)}}else{let existingDecorator=el.querySelector(".redirect-decorator");existingDecorator&&existingDecorator.remove()}if(!isSidecar&&!isRedirect&&!isPreview&&plugin.settings.showPreviewDecorator)if(plugin.hasPreviewFile(dataPath)){let titleEl=el.querySelector(".tree-item-inner");if(titleEl){let existingDecorator=el.querySelector(".preview-decorator");existingDecorator&&existingDecorator.remove();let decoratorEl=document.createElement("span");decoratorEl.className="preview-decorator",decoratorEl.title="This file has a preview file",titleEl.insertBefore(decoratorEl,titleEl.firstChild)}}else{let existingDecorator=el.querySelector(".preview-decorator");existingDecorator&&existingDecorator.remove()}},"processNavItem");plugin.sidecarAppearanceObserver=new MutationObserver(mutations=>{let shouldProcessAttributes=!1,dataPathChanged=!1,isDragging=!1,affectedNodes=new Set;isDragging=document.querySelector(".is-being-dragged-over")!==null,mutations.forEach(mutation=>{if(mutation.type==="childList")mutation.addedNodes.forEach(node=>{node instanceof HTMLElement&&node.classList.contains("nav-file-title")&&(affectedNodes.add(node),shouldProcessAttributes=!0)});else if(mutation.type==="attributes"&&!isDragging&&mutation.target instanceof HTMLElement){if(mutation.target.classList.contains("is-being-dragged-over")||mutation.oldValue&&mutation.oldValue.includes("is-being-dragged-over"))return;mutation.attributeName==="data-path"&&(dataPathChanged=!0,shouldProcessAttributes=!0,mutation.target.classList.contains("nav-file-title")&&affectedNodes.add(mutation.target)),mutation.attributeName==="class"&&(mutation.target.classList.contains("is-collapsed")||mutation.oldValue&&mutation.oldValue.includes("is-collapsed"))&&(shouldProcessAttributes=!0)}}),shouldProcessAttributes&&!isDragging&&(styleUpdateTimeout!==null&&window.clearTimeout(styleUpdateTimeout),styleUpdateTimeout=window.setTimeout(()=>{if(affectedNodes.size>0&&affectedNodes.forEach(node=>processNavItem(node)),dataPathChanged){let query='.nav-file-title[data-path$=".'+plugin.settings.sidecarSuffix+'.md"], .nav-file-title[data-path$=".'+plugin.settings.redirectFileSuffix+'.md"]';document.querySelectorAll(query).forEach(el=>{el instanceof HTMLElement&&processNavItem(el)}),plugin.settings.showRedirectDecorator&&document.querySelectorAll(".nav-file-title").forEach(el=>{if(el instanceof HTMLElement){let dataPath=el.getAttribute("data-path");dataPath&&!plugin.isSidecarFile(dataPath)&&!plugin.isRedirectFile(dataPath)&&processNavItem(el)}}),plugin.settings.showRedirectDecoratorOnSidecars&&document.querySelectorAll('.nav-file-title[data-path$=".'+plugin.settings.sidecarSuffix+'.md"]').forEach(el=>{el instanceof HTMLElement&&processNavItem(el)})}styleUpdateTimeout=null},50))});let navContainer=document.querySelector(".nav-files-container, .workspace-leaf-content .nav-files-container");navContainer&&plugin.sidecarAppearanceObserver.observe(navContainer,{childList:!0,subtree:!0,attributes:!0,attributeOldValue:!0,attributeFilter:["class","data-path"]}),document.querySelectorAll(".nav-file-title").forEach(el=>{el instanceof HTMLElement&&processNavItem(el)})}__name(updateSidecarFileAppearance,"updateSidecarFileAppearance");function updateSidecarCss(plugin){let id="sidecar-styles",styleElement=document.getElementById(id),styleTextContent="",fullSidecarExtension="."+plugin.settings.sidecarSuffix+".md",fullRedirectExtension="."+plugin.settings.redirectFileSuffix+".md",previewPattern="."+plugin.settings.previewFileSuffix+".";plugin.settings.hideSidecarsInExplorer&&(styleTextContent+=`
		.nav-file-title[data-path$='${fullSidecarExtension}'] {
			display: none !important;
		}
		`),plugin.settings.hideRedirectFilesInExplorer&&(styleTextContent+=`
		.nav-file-title[data-path$='${fullRedirectExtension}'] {
			display: none !important;
		}
		`),plugin.settings.hidePreviewFilesInExplorer&&(styleTextContent+=`
		.nav-file-title[data-path*='${previewPattern}'] {
			display: none !important;
		}
		`),plugin.settings.dimSidecarsInExplorer&&(styleTextContent+=`
		.nav-file-title[data-path$='${fullSidecarExtension}'],
		.nav-file-title[data-path$='${fullRedirectExtension}'],
		.nav-file-title[data-path*='${previewPattern}'] {
			color: var(--text-faint) !important;
		}
		.nav-file-title[data-path$='${fullSidecarExtension}'] .tree-item-icon,
		.nav-file-title[data-path$='${fullRedirectExtension}'] .tree-item-icon,
		.nav-file-title[data-path*='${previewPattern}'] .tree-item-icon {
			color: var(--text-faint) !important;		}
		.nav-file-title[data-path$='${fullSidecarExtension}']:hover,
		.nav-file-title[data-path$='${fullSidecarExtension}'].is-active,
		.nav-file-title[data-path$='${fullRedirectExtension}']:hover,
		.nav-file-title[data-path$='${fullRedirectExtension}'].is-active,
		.nav-file-title[data-path*='${previewPattern}']:hover,
		.nav-file-title[data-path*='${previewPattern}'].is-active {
			color: var(--text-muted) !important;
		}
		.nav-file-title[data-path$='${fullSidecarExtension}']:hover .tree-item-icon,
		.nav-file-title[data-path$='${fullSidecarExtension}'].is-active .tree-item-icon,
		.nav-file-title[data-path$='${fullRedirectExtension}']:hover .tree-item-icon,
		.nav-file-title[data-path$='${fullRedirectExtension}'].is-active .tree-item-icon,
		.nav-file-title[data-path*='${previewPattern}']:hover .tree-item-icon,
		.nav-file-title[data-path*='${previewPattern}'].is-active .tree-item-icon {
			color: var(--text-muted) !important;
		}
		`),plugin.settings.prependSidecarIndicator&&(styleTextContent+=`
		.nav-file-title[data-path$='${fullSidecarExtension}']::before,
		.nav-file-title[data-path$='${fullRedirectExtension}']::before,
		.nav-file-title[data-path*='${previewPattern}']::before {
			content: "\u2BA1";
			padding-left: 0.2em;
			padding-right: 0.75em;
		}
		.nav-file-title[data-path$='${fullSidecarExtension}'] .tree-item-inner,
		.nav-file-title[data-path$='${fullRedirectExtension}'] .tree-item-inner,
		.nav-file-title[data-path*='${previewPattern}'] .tree-item-inner {
			vertical-align: text-top;
		}
		.nav-file-title[data-path$='${fullSidecarExtension}'],
		.nav-file-title[data-path$='${fullRedirectExtension}'],
		.nav-file-title[data-path*='${previewPattern}'] {
			padding-top: 0px !important;
			padding-bottom: calc(2 * var(--size-4-1)) !important;
		}
		`),styleTextContent+=`
	/* Hide default .md extensions for sidecar files */
	.nav-file-title[data-path$='${fullSidecarExtension}'] .nav-file-tag:not(.sidecar-tag):not(.main-ext-tag):not(.redirect-tag):not(.preview-tag) {
		display: none !important;
	}
	.nav-file-title[data-path$='${fullRedirectExtension}'] .nav-file-tag:not(.sidecar-tag):not(.main-ext-tag):not(.redirect-tag):not(.preview-tag) {
		display: none !important;
	}
	.nav-file-title[data-path*='${previewPattern}'] .nav-file-tag:not(.sidecar-tag):not(.main-ext-tag):not(.redirect-tag):not(.preview-tag) {
		display: none !important;
	}
	`,styleTextContent?(styleElement||(styleElement=document.createElement("style"),styleElement.id=id,document.head.appendChild(styleElement)),styleElement.textContent=styleTextContent):styleElement&&styleElement.remove()}__name(updateSidecarCss,"updateSidecarCss");var import_obsidian6=require("obsidian");var VaultEventHandler=class{constructor(plugin,sidecarManager){this.recentRenames=new Map;this.RENAME_DEBOUNCE_MS=100;this.uiUpdateTimer=null;this.UI_UPDATE_DEBOUNCE_MS=50;this.isProcessingBulkOperation=!1;this.bulkOperationTimer=null;this.BULK_OPERATION_DEBOUNCE_MS=200;this.plugin=plugin,this.app=plugin.app,this.sidecarManager=sidecarManager}markBulkOperationStart(){this.isProcessingBulkOperation=!0,this.bulkOperationTimer&&window.clearTimeout(this.bulkOperationTimer),this.bulkOperationTimer=window.setTimeout(()=>{this.isProcessingBulkOperation=!1,this.bulkOperationTimer=null,loggerDebug(this,"Bulk operation completed - resuming normal event processing")},this.BULK_OPERATION_DEBOUNCE_MS)}scheduleUIUpdate(){this.uiUpdateTimer&&window.clearTimeout(this.uiUpdateTimer),this.uiUpdateTimer=window.setTimeout(()=>{this.plugin.updateSidecarFileAppearance(),this.uiUpdateTimer=null},this.UI_UPDATE_DEBOUNCE_MS)}async renameSidecarMainFile(oldSidecarPath,newSidecarPath){let pathExtractors=this.plugin.fileOperationService.createPathExtractors();await this.plugin.fileOperationService.renameMainFileForDerivative(oldSidecarPath,newSidecarPath,{fileType:"sidecar",pathExtractor:pathExtractors.sidecar,showUserNotices:!0,logContext:"sidecar-main-rename"})}async renameRedirectMainFile(oldRedirectPath,newRedirectPath){let pathExtractors=this.plugin.fileOperationService.createPathExtractors();await this.plugin.fileOperationService.renameMainFileForDerivative(oldRedirectPath,newRedirectPath,{fileType:"redirect",pathExtractor:pathExtractors.redirect,showUserNotices:!1,logContext:"redirect-main-rename"})}async handleExtensionReapplication(file,oldPath){let newPath=file.path,logLevel=(this.isProcessingBulkOperation,"debug");if(loggerDebug(this,"Checking if file rename requires extension reapplication",{oldPath,newPath,duringBulkOp:this.isProcessingBulkOperation}),this.plugin.isSidecarFile(oldPath)){loggerDebug(this,"Old path was a sidecar file - analyzing rename pattern");let mainPath=this.plugin.getSourcePathFromSidecar(oldPath);if(mainPath){loggerDebug(this,"Main file path identified for old sidecar",{mainPath});let expectedNewSidecarPath=this.plugin.getSidecarPath(mainPath);if(loggerDebug(this,"Expected new sidecar path calculated",{expectedNewSidecarPath}),newPath!==expectedNewSidecarPath&&!this.plugin.isSidecarFile(newPath)){loggerDebug(this,"Extension reapplication needed - reconstructing proper sidecar path");let newFileName=newPath.substring(newPath.lastIndexOf("/")+1),newFileNameWithoutMd=newFileName.endsWith(".md")?newFileName.slice(0,-3):newFileName,mainFileName=mainPath.substring(mainPath.lastIndexOf("/")+1),mainBaseName=mainFileName.lastIndexOf(".")!==-1?mainFileName.slice(0,mainFileName.lastIndexOf(".")):mainFileName,mainExtensions=mainFileName.substring(mainBaseName.length),newBaseName=newFileNameWithoutMd.lastIndexOf(".")!==-1?newFileNameWithoutMd.slice(0,newFileNameWithoutMd.lastIndexOf(".")):newFileNameWithoutMd,newSidecarPath=newPath.substring(0,newPath.lastIndexOf("/")+1)+newBaseName+mainExtensions+"."+this.plugin.settings.sidecarSuffix+".md";loggerDebug(this,"Calculated proper sidecar path for restoration",{originalName:newFileName,baseName:newBaseName,mainExtensions,restoredPath:newSidecarPath});try{return loggerDebug(this,"Restoring proper sidecar file extension"),await this.app.fileManager.renameFile(file,newSidecarPath),loggerInfo(this,"Sidecar extension successfully restored",{from:newPath,to:newSidecarPath}),loggerDebug(this,"Processing corresponding main file rename"),await this.renameSidecarMainFile(oldPath,newSidecarPath),!0}catch(restoreError){loggerError(this,"Failed to restore sidecar extension",{newPath,attemptedPath:newSidecarPath,error:restoreError instanceof Error?restoreError.message:String(restoreError)})}}else loggerDebug(this,"No extension reapplication needed - rename is valid",{pathsMatch:newPath===expectedNewSidecarPath,isStillSidecar:this.plugin.isSidecarFile(newPath)})}else loggerWarn(this,"Could not determine main file path for old sidecar",{oldSidecarPath:oldPath})}else loggerDebug(this,"Old path was not a sidecar file - no extension reapplication needed");return!1}async handleFileCreate(file){file instanceof import_obsidian6.TFile&&(loggerDebug(this,"Processing file creation event",{path:file.path,extension:file.extension}),await this.sidecarManager.createSidecarForFile(file),this.plugin.isRedirectFile(file.path)&&(loggerDebug(this,"Redirect file created - scheduling UI update"),this.scheduleUIUpdate()))}async handleFileDelete(file){file instanceof import_obsidian6.TFile&&(loggerDebug(this,"Processing file deletion event",{path:file.path}),await this.sidecarManager.deleteSidecarForFile(file),this.plugin.isRedirectFile(file.path)&&(loggerDebug(this,"Redirect file deleted - scheduling UI update"),this.scheduleUIUpdate()))}async handleFileRename(file,oldPath){if(file instanceof import_obsidian6.TFile){let newPath=file.path;if(this.isProcessingBulkOperation&&this.plugin.filePathService.isDerivativeFile(newPath)){loggerDebug(this,"Skipping derivative file processing during bulk operation",{oldPath,newPath,isDerivative:!0}),this.scheduleUIUpdate();return}let renameKey=`${oldPath}\u2192${newPath}`,now=Date.now(),lastRename=this.recentRenames.get(renameKey);if(lastRename&&now-lastRename<25){loggerDebug(this,"Skipping rapid duplicate rename event",{oldPath,newPath,timeSinceLastRename:now-lastRename});return}if(this.recentRenames.set(renameKey,now),this.recentRenames.size>100){let cutoff=now-250;for(let[key,timestamp]of this.recentRenames.entries())timestamp<cutoff&&this.recentRenames.delete(key)}loggerDebug(this,"Processing file rename event",{oldPath,newPath});let extensionWasReapplied=await this.handleExtensionReapplication(file,oldPath);if(loggerDebug(this,"Extension reapplication check completed",{reapplied:extensionWasReapplied}),extensionWasReapplied){loggerDebug(this,"Extension was reapplied - updating UI and completing rename handling"),loggerDebug(this,"Processing preview file rename after extension reapplication",{oldPath,newPath});let pathExtractors2=this.plugin.fileOperationService.createPathExtractors(),commonPreviewExts2=["png","jpg","jpeg","gif","webp","svg"];try{await this.plugin.fileOperationService.renameDerivativeForMainFile(oldPath,newPath,{fileType:"preview",pathExtractor:pathExtractors2.preview,showUserNotices:!1,logContext:"extension-reapplication-preview-rename"},commonPreviewExts2)}catch(error){loggerWarn(this,"Error renaming preview files after extension reapplication",{oldPath,newPath,error:error instanceof Error?error.message:String(error)})}this.scheduleUIUpdate();return}if(this.plugin.isSidecarFile(newPath)){loggerDebug(this,"Renamed file is a sidecar - processing sidecar rename logic"),await this.renameSidecarMainFile(oldPath,newPath);let mainPath=this.plugin.getSourcePathFromSidecar(newPath);mainPath&&!this.app.vault.getAbstractFileByPath(mainPath)&&loggerWarn(this,"Sidecar is orphaned after rename - main file not found",{sidecarPath:newPath,expectedMainPath:mainPath}),loggerDebug(this,"Scheduling UI update after sidecar rename"),this.scheduleUIUpdate();return}if(this.plugin.isRedirectFile(newPath)){loggerDebug(this,"Renamed file is a redirect file - processing redirect rename logic"),await this.renameRedirectMainFile(oldPath,newPath),loggerDebug(this,"Scheduling UI update after redirect rename"),this.scheduleUIUpdate();return}if(this.plugin.isPreviewFile(newPath)){loggerDebug(this,"Renamed file is a preview file - processing preview rename logic"),await this.renamePreviewMainFile(oldPath,newPath),loggerDebug(this,"Scheduling UI update after preview rename"),this.scheduleUIUpdate();return}loggerDebug(this,"Renamed file is a main file - processing main file rename logic");let oldDir=oldPath.substring(0,oldPath.lastIndexOf("/")+1),newDir=newPath.substring(0,newPath.lastIndexOf("/")+1);(oldDir!==newDir||oldPath!==newPath)&&this.markBulkOperationStart();let pathExtractors=this.plugin.fileOperationService.createPathExtractors(),commonPreviewExts=["png","jpg","jpeg","gif","webp","svg"];try{await this.plugin.fileOperationService.renameDerivativeForMainFile(oldPath,newPath,{fileType:"sidecar",pathExtractor:pathExtractors.sidecar,showUserNotices:!1,logContext:"main-sidecar-rename"})}catch(error){loggerWarn(this,"Error renaming sidecar for main file",{oldPath,newPath,error:error instanceof Error?error.message:String(error)})}try{await this.plugin.fileOperationService.renameDerivativeForMainFile(oldPath,newPath,{fileType:"redirect",pathExtractor:pathExtractors.redirect,showUserNotices:!1,logContext:"main-redirect-rename"})}catch(error){loggerWarn(this,"Error renaming redirect for main file",{oldPath,newPath,error:error instanceof Error?error.message:String(error)})}try{await this.plugin.fileOperationService.renameDerivativeForMainFile(oldPath,newPath,{fileType:"preview",pathExtractor:pathExtractors.preview,showUserNotices:!1,logContext:"main-preview-rename"},commonPreviewExts)}catch(error){loggerWarn(this,"Error renaming preview files for main file",{oldPath,newPath,error:error instanceof Error?error.message:String(error)})}loggerDebug(this,"Scheduling UI update after main file rename"),this.scheduleUIUpdate()}}async renamePreviewMainFile(oldPreviewPath,newPreviewPath){let pathExtractors=this.plugin.fileOperationService.createPathExtractors();await this.plugin.fileOperationService.renameMainFileForDerivative(oldPreviewPath,newPreviewPath,{fileType:"preview",pathExtractor:pathExtractors.preview,showUserNotices:!1,logContext:"preview-main-rename"})}};__name(VaultEventHandler,"VaultEventHandler");var import_obsidian7=require("obsidian");var SidecarManager=class{constructor(plugin){this.plugin=plugin}async createSidecarForFile(file,forceCreate=!1){let filePath=file.path;if(loggerDebug(this,"Checking if sidecar creation is needed",{filePath,forceCreate}),this.plugin.filePathService.isDerivativeFile(filePath)){loggerDebug(this,"File is a derivative file - skipping sidecar creation",{filePath});return}if(!forceCreate&&!this.plugin.isMonitoredFile(filePath)){loggerDebug(this,"File is not monitored - skipping sidecar creation",{filePath});return}if(!forceCreate&&!this.plugin.settings.autoCreateSidecars){loggerDebug(this,"Auto-creation disabled - skipping sidecar creation");return}let sidecarPath=this.plugin.getSidecarPath(filePath);if(this.plugin.app.vault.getAbstractFileByPath(sidecarPath)){loggerDebug(this,"Sidecar already exists - skipping creation",{sidecarPath});return}try{loggerDebug(this,"Creating new sidecar file",{filePath,sidecarPath}),await this.plugin.app.vault.create(sidecarPath,""),loggerInfo(this,"Sidecar file created successfully",{mainFile:filePath,sidecarFile:sidecarPath})}catch(error){loggerError(this,"Failed to create sidecar file",{filePath,sidecarPath,error:error instanceof Error?error.message:String(error)})}}async deleteSidecarForFile(file){let filePath=file.path;if(loggerDebug(this,"Checking if sidecar deletion is needed",{filePath}),this.plugin.filePathService.isDerivativeFile(filePath)){loggerDebug(this,"File is a derivative file - no cleanup needed",{filePath});return}if(!this.plugin.isMonitoredFile(filePath)){loggerDebug(this,"File was not monitored - no sidecar to delete",{filePath});return}let sidecarPath=this.plugin.getSidecarPath(filePath),sidecarFile=this.plugin.app.vault.getAbstractFileByPath(sidecarPath);if(!sidecarFile||!(sidecarFile instanceof import_obsidian7.TFile)){loggerDebug(this,"No sidecar file found to delete",{sidecarPath});return}try{loggerDebug(this,"Deleting sidecar file",{filePath,sidecarPath}),await this.plugin.app.fileManager.trashFile(sidecarFile),loggerInfo(this,"Sidecar file deleted successfully",{mainFile:filePath,sidecarFile:sidecarPath})}catch(error){loggerError(this,"Failed to delete sidecar file",{filePath,sidecarPath,error:error instanceof Error?error.message:String(error)})}}async handleSidecarRename(file,oldPath,newPath){if(loggerDebug(this,"Processing main file rename - checking for sidecar and preview files",{oldPath,newPath}),!this.plugin.isMonitoredFile(newPath)){loggerDebug(this,"New path is not monitored - skipping sidecar, handling preview rename only",{newPath}),await this.handlePreviewRename(oldPath,newPath);return}let pathExtractors=this.plugin.fileOperationService.createPathExtractors();try{await this.plugin.fileOperationService.renameDerivativeForMainFile(oldPath,newPath,{fileType:"sidecar",pathExtractor:pathExtractors.sidecar,showUserNotices:!1,logContext:"main-sidecar-rename"})}catch(error){loggerError(this,"Failed to rename sidecar file using FileOperationService",{oldPath,newPath,error:error instanceof Error?error.message:String(error)})}await this.handlePreviewRename(oldPath,newPath)}async handlePreviewRename(oldMainPath,newMainPath){let pathExtractors=this.plugin.fileOperationService.createPathExtractors(),commonPreviewExts=["png","jpg","jpeg","gif","webp","svg"];await this.plugin.fileOperationService.renameDerivativeForMainFile(oldMainPath,newMainPath,{fileType:"preview",pathExtractor:pathExtractors.preview,showUserNotices:!1,logContext:"main-preview-rename"},commonPreviewExts)}async handleRedirectRename(oldMainPath,newMainPath){let pathExtractors=this.plugin.fileOperationService.createPathExtractors();await this.plugin.fileOperationService.renameDerivativeForMainFile(oldMainPath,newMainPath,{fileType:"redirect",pathExtractor:pathExtractors.redirect,showUserNotices:!1,logContext:"main-redirect-rename"})}async revalidateAllSidecars(){loggerDebug(this,"Starting comprehensive sidecar revalidation");let{validFiles,orphanSidecars,orphanReasons,createdCount}=await this.scanAndValidateFiles();if(orphanSidecars.length>0)loggerInfo(this,"Found orphaned sidecars - showing deletion modal",{orphanCount:orphanSidecars.length}),await this.plugin.showOrphanModal(orphanSidecars,orphanReasons,deletedCount=>{let totalMessage=`Revalidation complete. Created: ${createdCount}, Deleted: ${deletedCount}`;new import_obsidian7.Notice(totalMessage,4e3),loggerInfo(this,"Revalidation completed",{created:createdCount,deleted:deletedCount})});else{let message=createdCount>0?`Revalidation complete. Created ${createdCount} sidecar${createdCount!==1?"s":""}.`:"Revalidation complete. No changes needed.";new import_obsidian7.Notice(message,3e3),loggerInfo(this,"Revalidation completed",{created:createdCount,deleted:0,orphansFound:!1})}this.plugin.updateSidecarFileAppearance()}async scanAndValidateFiles(){let validFiles=[],orphanSidecars=[],orphanReasons={},createdCount=0,allFiles=this.plugin.app.vault.getFiles();loggerDebug(this,"Scanning all files for validation",{totalFiles:allFiles.length});for(let file of allFiles){let filePath=file.path;if(!this.plugin.filePathService.isDerivativeFile(filePath)&&this.plugin.isMonitoredFile(filePath)&&(validFiles.push(filePath),this.plugin.settings.autoCreateSidecars)){let sidecarPath=this.plugin.getSidecarPath(filePath);if(!this.plugin.app.vault.getAbstractFileByPath(sidecarPath))try{let sidecarContent=`# ${file.basename}

Sidecar notes for ${file.name}
`;await this.plugin.app.vault.create(sidecarPath,sidecarContent),createdCount++,loggerDebug(this,"Created missing sidecar during revalidation",{mainFile:filePath,sidecarFile:sidecarPath})}catch(error){loggerError(this,"Failed to create sidecar during revalidation",{filePath,sidecarPath,error:error instanceof Error?error.message:String(error)})}}}for(let file of allFiles){let filePath=file.path;if(this.plugin.isSidecarFile(filePath)){let mainPath=this.plugin.getSourcePathFromSidecar(filePath);if(!mainPath){orphanSidecars.push(filePath),orphanReasons[filePath]="Invalid sidecar format";continue}if(!this.plugin.app.vault.getAbstractFileByPath(mainPath)){orphanSidecars.push(filePath),orphanReasons[filePath]=`Main file not found: ${mainPath}`;continue}if(!this.plugin.isMonitoredFile(mainPath)){orphanSidecars.push(filePath),orphanReasons[filePath]=`Main file no longer monitored: ${mainPath}`;continue}}}return loggerInfo(this,"File scan completed",{validFiles:validFiles.length,orphanSidecars:orphanSidecars.length,created:createdCount}),{validFiles,orphanSidecars,orphanReasons,createdCount}}};__name(SidecarManager,"SidecarManager");var FilePathService=class{constructor(settings){this.settings=settings,loggerDebug(this,"FilePathService initialized")}updateSettings(settings){loggerDebug(this,"Updating settings reference"),this.settings=settings}isMonitoredFile(filePath,isDerivativeFile){if(loggerDebug(this,"Checking if file is monitored",{filePath}),isDerivativeFile(filePath))return loggerDebug(this,"File is derivative, not monitored",{filePath}),!1;if(!isFileAllowedByFolderLists(filePath,this.settings))return loggerDebug(this,"File not allowed by folder lists",{filePath}),!1;let extension=getExtension(filePath),isMonitored=extension?this.settings.monitoredExtensions.map(ext=>ext.toLowerCase().replace(/^\./,"")).includes(extension):!1;return loggerDebug(this,"File monitoring result",{filePath,extension,isMonitored}),isMonitored}getSidecarPath(sourcePath){return`${sourcePath}.${this.settings.sidecarSuffix}.md`}isSidecarFile(filePath){return filePath.endsWith(`.${this.settings.sidecarSuffix}.md`)}getSourcePathFromSidecar(sidecarPath){let fullSuffix=`.${this.settings.sidecarSuffix}.md`;return sidecarPath.endsWith(fullSuffix)?sidecarPath.substring(0,sidecarPath.length-fullSuffix.length):null}getRedirectPath(sourcePath){return`${sourcePath}.${this.settings.redirectFileSuffix}.md`}isRedirectFile(filePath){return filePath.endsWith(`.${this.settings.redirectFileSuffix}.md`)}isPreviewFile(filePath){return filePath.includes(`.${this.settings.previewFileSuffix}.`)}getSourcePathFromRedirect(redirectPath){let fullSuffix=`.${this.settings.redirectFileSuffix}.md`;return redirectPath.endsWith(fullSuffix)?redirectPath.substring(0,redirectPath.length-fullSuffix.length):null}getSourcePathFromPreview(previewPath){let previewPattern=new RegExp(`\\.${this.settings.previewFileSuffix}\\.[^.]+$`),match=previewPath.match(previewPattern);return match?previewPath.substring(0,previewPath.length-match[0].length):null}getPreviewFileInfo(filePath){if(!this.isPreviewFile(filePath))return null;let mainPath=this.getSourcePathFromPreview(filePath);if(!mainPath)return null;let extension=this.getFileExtension(filePath);return{mainPath,extension}}getMainPathFromRedirect(redirectPath){return this.getSourcePathFromRedirect(redirectPath)}getPreviewPath(filePath,extension="png"){return`${filePath}.${this.settings.previewFileSuffix}.${extension}`}isDerivativeFile(filePath){let isDerivative=this.isSidecarFile(filePath)||this.isRedirectFile(filePath)||this.isPreviewFile(filePath);return loggerDebug(this,"Checking if file is derivative",{filePath,isDerivative}),isDerivative}getFileExtension(filePath){return getExtension(filePath)}getDirectory(filePath){return getDirname(filePath)}getFilename(filePath){return getBasename(filePath)}joinPaths(dir,file){return joinPath(dir,file)}toPosixPath(path){return toPosixPath(path)}};__name(FilePathService,"FilePathService");var CommandService=class{constructor(plugin){this.plugin=plugin,loggerDebug(this,"CommandService initialized")}registerCommands(){loggerDebug(this,"Registering all plugin commands"),this.registerRevalidateCommand()}registerRevalidateCommand(){loggerDebug(this,"Registering revalidate command"),this.plugin.addCommand({id:"revalidate-sidecars",name:"Revalidate all sidecars",callback:async()=>{loggerInfo(this,"Revalidate command triggered"),await this.plugin.revalidateSidecars()}})}registerCreateSidecarCommand(){loggerDebug(this,"Registering create sidecar command"),this.plugin.addCommand({id:"create-sidecar-current-file",name:"Create sidecar for current file",callback:async()=>{loggerInfo(this,"Create sidecar command triggered");let activeFile=this.plugin.app.workspace.getActiveFile();activeFile&&!this.plugin.isSidecarFile(activeFile.path)&&await this.plugin.sidecarManager.createSidecarForFile(activeFile,!0)}})}};__name(CommandService,"CommandService");var import_obsidian8=require("obsidian");var MenuService=class{constructor(plugin){this.plugin=plugin,loggerDebug(this,"MenuService initialized")}registerMenuHandlers(){loggerDebug(this,"Registering menu handlers"),this.registerFileMenu()}registerFileMenu(){loggerDebug(this,"Registering file menu handler"),this.plugin.registerEvent(this.plugin.app.workspace.on("file-menu",(menu,file)=>{file instanceof import_obsidian8.TFile&&!this.plugin.isSidecarFile(file.path)&&menu.addItem(item=>{item.setTitle("Create sidecar for file").setIcon("file-plus-2").setSection("action").onClick(async()=>{await this.handleCreateSidecarForFile(file)})})}))}async handleCreateSidecarForFile(file){loggerDebug(this,"Handling create sidecar for file",{path:file.path});let ext=file.extension.toLowerCase();this.plugin.settings.monitoredExtensions.map(e=>e.toLowerCase()).includes(ext)?await this.createAndOpenSidecar(file):(loggerInfo(this,"Extension not monitored, showing add filetype modal",{extension:ext}),await this.showAddFiletypeModal(ext,file))}async showAddFiletypeModal(extension,file){return loggerDebug(this,"Showing add filetype modal",{extension}),new Promise(resolve=>{new AddFiletypeModal(this.plugin.app,extension,async newExt=>{this.plugin.settings.monitoredExtensions.map(e=>e.toLowerCase()).includes(newExt)||(this.plugin.settings.monitoredExtensions.push(newExt),await this.plugin.saveSettings(),new import_obsidian8.Notice(`Added .${newExt} to monitored file types.`),loggerInfo(this,"Added new file extension",{extension:newExt})),await this.createAndOpenSidecar(file),resolve()}).open()})}async createAndOpenSidecar(file){loggerDebug(this,"Creating and opening sidecar",{path:file.path});let sidecarPath=this.plugin.getSidecarPath(file.path),existing=this.plugin.app.vault.getAbstractFileByPath(sidecarPath);existing||await this.plugin.sidecarManager.createSidecarForFile(file,!0);let sidecarFile=this.plugin.app.vault.getAbstractFileByPath(sidecarPath);sidecarFile instanceof import_obsidian8.TFile&&await this.openFileInEditor(sidecarFile),existing&&new import_obsidian8.Notice("Sidecar already exists for this file.")}async openFileInEditor(file){loggerDebug(this,"Opening file in editor",{path:file.path});let foundLeaf=null;if(this.plugin.app.workspace.iterateAllLeaves(leaf=>{leaf.view instanceof import_obsidian8.FileView&&leaf.view.file&&leaf.view.file.path===file.path&&(foundLeaf=leaf)}),foundLeaf)loggerDebug(this,"File already open, activating existing tab",{path:file.path}),this.plugin.app.workspace.setActiveLeaf(foundLeaf,{focus:!0});else{loggerDebug(this,"Opening file in new tab",{path:file.path});let leaf=this.plugin.app.workspace.getLeaf(!0);await leaf.openFile(file),this.plugin.app.workspace.setActiveLeaf(leaf,{focus:!0})}}};__name(MenuService,"MenuService");var import_obsidian9=require("obsidian");var import_obsidian10=require("obsidian");var FileOperationService=class{constructor(plugin){this.nonExistentFiles=new Set;this.NON_EXISTENT_CACHE_SIZE=50;this.recentOperations=new Map;this.OPERATION_CACHE_MS=1e3;this.plugin=plugin,this.app=plugin.app}hasRecentOperation(operationKey){let now=Date.now(),lastOperation=this.recentOperations.get(operationKey);if(lastOperation&&now-lastOperation<this.OPERATION_CACHE_MS)return!0;if(this.recentOperations.size>100){let cutoff=now-this.OPERATION_CACHE_MS;for(let[key,timestamp]of this.recentOperations.entries())timestamp<cutoff&&this.recentOperations.delete(key)}return!1}markOperationCompleted(operationKey){this.recentOperations.set(operationKey,Date.now())}async renameMainFileForDerivative(oldDerivativePath,newDerivativePath,config2){loggerDebug(this,`Processing ${config2.fileType} rename - determining main file paths`,{oldPath:oldDerivativePath,newPath:newDerivativePath,context:config2.logContext});let oldMainPath=config2.pathExtractor.getSourceFromDerivative(oldDerivativePath);if(!oldMainPath){loggerWarn(this,`Cannot determine old main file path for ${config2.fileType}`,{derivativePath:oldDerivativePath,reason:`invalid ${config2.fileType} path format`});return}let newMainPath=config2.pathExtractor.getSourceFromDerivative(newDerivativePath);if(!newMainPath){loggerWarn(this,`Cannot determine new main file path for ${config2.fileType}`,{derivativePath:newDerivativePath,reason:`invalid ${config2.fileType} path format`});return}if(this.nonExistentFiles.has(oldMainPath))return;let mainFile=this.app.vault.getAbstractFileByPath(oldMainPath);if(!mainFile||!(mainFile instanceof import_obsidian10.TFile)){if(this.nonExistentFiles.add(oldMainPath),this.nonExistentFiles.size>this.NON_EXISTENT_CACHE_SIZE){let firstItem=this.nonExistentFiles.values().next().value;this.nonExistentFiles.delete(firstItem)}loggerDebug(this,`Main file not found - skipping ${config2.fileType} rename operation`,{oldMainPath,newMainPath,context:config2.logContext,cached:!1});return}if(this.nonExistentFiles.delete(oldMainPath),loggerDebug(this,"Old main file path determined",{oldMainPath}),loggerDebug(this,"New main file path determined",{newMainPath}),loggerDebug(this,"Main file located successfully",{filePath:mainFile.path}),this.app.vault.getAbstractFileByPath(newMainPath)){loggerWarn(this,"Target main file path already exists - cannot rename",{newMainPath,fileName:newMainPath.split("/").pop()}),config2.showUserNotices&&new import_obsidian10.Notice(`Cannot rename main file: ${newMainPath.split("/").pop()} already exists`,3e3);return}loggerDebug(this,"Target path is available - proceeding with main file rename");try{loggerDebug(this,`Renaming main file to match ${config2.fileType} rename`,{from:oldMainPath,to:newMainPath}),await this.app.fileManager.renameFile(mainFile,newMainPath),loggerInfo(this,`Main file successfully renamed to match ${config2.fileType}`,{oldPath:oldMainPath,newPath:newMainPath,fileName:newMainPath.split("/").pop()}),config2.showUserNotices&&new import_obsidian10.Notice(`Also renamed main file to: ${newMainPath.split("/").pop()}`,2e3)}catch(error){loggerError(this,`Failed to rename main file for ${config2.fileType}`,{oldPath:oldMainPath,newPath:newMainPath,error:error instanceof Error?error.message:String(error)}),config2.showUserNotices&&new import_obsidian10.Notice(`Failed to rename main file: ${error instanceof Error?error.message:String(error)}`,3e3)}}async renameDerivativeForMainFile(oldMainPath,newMainPath,config2,extensions){let operationKey=`${config2.fileType}:${oldMainPath}\u2192${newMainPath}`;if(this.hasRecentOperation(operationKey)){loggerDebug(this,`Skipping recent ${config2.fileType} operation`,{oldMainPath,newMainPath,context:config2.logContext});return}if(loggerDebug(this,`Checking for ${config2.fileType} files to rename`,{oldMainPath,newMainPath,context:config2.logContext}),!extensions){let oldDerivativePath=config2.pathExtractor.getDerivativeFromSource(oldMainPath);await this.renameSingleDerivativeFile(oldDerivativePath,newMainPath,config2)&&this.markOperationCompleted(operationKey);return}let filesFound=!1;for(let ext of extensions){let oldDerivativePath=config2.pathExtractor.getDerivativeFromSource(oldMainPath,ext);loggerDebug(this,`Checking ${config2.fileType} file with extension`,{oldMainPath,extension:ext,expectedPath:oldDerivativePath,context:config2.logContext}),await this.renameSingleDerivativeFile(oldDerivativePath,newMainPath,config2,ext)&&(filesFound=!0)}!filesFound&&config2.fileType==="preview"&&(loggerDebug(this,"No standard preview files found - searching for orphaned preview files",{oldMainPath,newMainPath,context:config2.logContext}),filesFound=await this.findAndRenameOrphanedPreviewFiles(oldMainPath,newMainPath)),filesFound&&this.markOperationCompleted(operationKey),filesFound||loggerDebug(this,`No ${config2.fileType} files found to rename`,{oldMainPath})}async renameSingleDerivativeFile(oldDerivativePath,newMainPath,config2,extension){let newDerivativePath=config2.pathExtractor.getDerivativeFromSource(newMainPath,extension);if(oldDerivativePath===newDerivativePath)return loggerDebug(this,`${config2.fileType} file paths are identical - no rename needed`,{path:oldDerivativePath,extension,context:config2.logContext}),!0;loggerDebug(this,`Path comparison for ${config2.fileType}`,{oldPath:oldDerivativePath,newPath:newDerivativePath,areEqual:oldDerivativePath===newDerivativePath,extension,context:config2.logContext});let fileToRename=this.app.vault.getAbstractFileByPath(oldDerivativePath);if(!fileToRename)return this.app.vault.getAbstractFileByPath(newDerivativePath)?(loggerDebug(this,`${config2.fileType} file already at target location - no rename needed`,{targetPath:newDerivativePath,oldPath:oldDerivativePath,extension}),!0):(config2.fileType==="preview"||loggerDebug(this,`${config2.fileType} file not found at expected location`,{expectedPath:oldDerivativePath,extension}),!1);if(fileToRename&&fileToRename instanceof import_obsidian10.TFile){let existingFile=this.app.vault.getAbstractFileByPath(newDerivativePath);if(existingFile&&existingFile!==fileToRename)return loggerWarn(this,`Target ${config2.fileType} path already exists - skipping rename`,{newPath:newDerivativePath,extension}),!1;if(fileToRename.path===newDerivativePath)return loggerDebug(this,`${config2.fileType} file already has correct name - no rename needed`,{path:newDerivativePath,extension}),!0;try{return loggerDebug(this,`Renaming ${config2.fileType} file`,{from:fileToRename.path,to:newDerivativePath,extension,pathsEqual:fileToRename.path===newDerivativePath}),fileToRename.path===newDerivativePath?(loggerWarn(this,"Attempted to rename file to same path - this should have been caught earlier",{path:newDerivativePath,fileType:config2.fileType}),!0):(await this.app.fileManager.renameFile(fileToRename,newDerivativePath),loggerInfo(this,`${config2.fileType} file renamed successfully`,{oldPath:fileToRename.path,newPath:newDerivativePath,mainFile:newMainPath}),!0)}catch(error){return loggerError(this,`Failed to rename ${config2.fileType} file`,{oldPath:fileToRename.path,newPath:newDerivativePath,extension,error:error instanceof Error?error.message:String(error)}),!1}}return!1}async findAndRenameOrphanedPreviewFiles(oldMainPath,newMainPath){let allFiles=this.app.vault.getFiles(),oldBaseName=oldMainPath.replace(/\.[^.]+$/,""),newBaseName=newMainPath.replace(/\.[^.]+$/,""),foundFiles=!1;for(let file of allFiles)if(this.plugin.isPreviewFile(file.path)&&this.plugin.getSourcePathFromPreview(file.path)===oldMainPath){let newPreviewPath=file.path.replace(oldBaseName,newBaseName);if(file.path===newPreviewPath)continue;let existingFile=this.app.vault.getAbstractFileByPath(newPreviewPath);if(existingFile&&existingFile!==file){loggerWarn(this,"Target preview path already exists - skipping orphan rename",{from:file.path,to:newPreviewPath});continue}try{loggerDebug(this,"Renaming orphaned preview file",{from:file.path,to:newPreviewPath}),await this.app.fileManager.renameFile(file,newPreviewPath),loggerInfo(this,"Orphaned preview file renamed successfully",{oldPath:file.path,newPath:newPreviewPath,mainFile:newMainPath}),foundFiles=!0}catch(error){loggerError(this,"Failed to rename orphaned preview file",{oldPath:file.path,newPath:newPreviewPath,error:error instanceof Error?error.message:String(error)})}}return foundFiles}createPathExtractors(){return{sidecar:{getSourceFromDerivative:path=>this.plugin.getSourcePathFromSidecar(path),getDerivativeFromSource:path=>this.plugin.getSidecarPath(path)},redirect:{getSourceFromDerivative:path=>this.plugin.getSourcePathFromRedirect(path),getDerivativeFromSource:path=>this.plugin.getRedirectPath(path)},preview:{getSourceFromDerivative:path=>this.plugin.getSourcePathFromPreview(path),getDerivativeFromSource:(path,ext="png")=>this.plugin.getPreviewPath(path,ext)}}}};__name(FileOperationService,"FileOperationService");var SidecarPlugin=class extends import_obsidian11.Plugin{constructor(){super(...arguments);this.isInitialRevalidating=!1;this.hasFinishedInitialLoad=!1}updateSidecarFileAppearance(){updateSidecarFileAppearance(this)}updateSidecarCss(){updateSidecarCss(this)}async onload(){initLogger(this),registerLoggerClass(this,"SidecarPlugin"),this.settingsManager=new SettingsManager(this),registerLoggerClass(this.settingsManager,"SettingsManager"),await this.settingsManager.loadSettings(),this.settings=this.settingsManager.getSettings(),this.filePathService=new FilePathService(this.settings),registerLoggerClass(this.filePathService,"FilePathService"),this.commandService=new CommandService(this),registerLoggerClass(this.commandService,"CommandService"),this.menuService=new MenuService(this),registerLoggerClass(this.menuService,"MenuService"),this.fileOperationService=new FileOperationService(this),registerLoggerClass(this.fileOperationService,"FileOperationService"),this.isInitialRevalidating=this.settings.revalidateOnStartup,this.hasFinishedInitialLoad=!1,this.sidecarManager=new SidecarManager(this),registerLoggerClass(this.sidecarManager,"SidecarManager"),this.vaultEventHandler=new VaultEventHandler(this,this.sidecarManager),registerLoggerClass(this.vaultEventHandler,"VaultEventHandler"),this.addSettingTab(this.settingsManager.getSettingTab()),this.commandService.registerCommands(),this.menuService.registerMenuHandlers(),this.app.workspace.onLayoutReady(async()=>{if(initializeDebugSystem(),setTimeout(()=>{this.updateSidecarCss(),this.updateSidecarFileAppearance()},200),this.registerEvent(this.app.vault.on("create",file=>{!this.isInitialRevalidating&&this.hasFinishedInitialLoad&&file instanceof import_obsidian11.TFile&&this.vaultEventHandler.handleFileCreate(file)})),this.registerEvent(this.app.vault.on("delete",file=>{!this.isInitialRevalidating&&this.hasFinishedInitialLoad&&file instanceof import_obsidian11.TFile&&this.vaultEventHandler.handleFileDelete(file)})),this.registerEvent(this.app.vault.on("rename",(file,oldPath)=>{!this.isInitialRevalidating&&this.hasFinishedInitialLoad&&file instanceof import_obsidian11.TFile&&this.vaultEventHandler.handleFileRename(file,oldPath)})),this.settings.revalidateOnStartup){loggerDebug(this,"Starting initial revalidation"),this.isInitialRevalidating=!0;try{await this.revalidateSidecars()}catch(error){loggerWarn(this,"Error during initial revalidation:",error)}finally{this.isInitialRevalidating=!1,this.hasFinishedInitialLoad=!0,loggerDebug(this,"Initial revalidation completed")}}else this.hasFinishedInitialLoad=!0,loggerDebug(this,"Skipped initial revalidation, plugin ready")}),loggerDebug(this,"Plugin loading completed")}onunload(){loggerDebug(this,"Plugin unloading"),this.sidecarAppearanceObserver&&(this.sidecarAppearanceObserver.disconnect(),this.sidecarAppearanceObserver=void 0)}async saveSettings(refreshStyles=!0){loggerDebug(this,"Saving settings",{refreshStyles}),await this.settingsManager.saveSettings(),this.filePathService.updateSettings(this.settings),refreshStyles&&(this.updateSidecarCss(),this.updateSidecarFileAppearance())}async showOrphanModal(orphanSidecars,orphanReasons,postDeletionCallback){return new Promise(resolveOuterPromise=>{new OrphanSidecarModal(this.app,orphanSidecars,async()=>{let actualDeletedCount=0;for(let orphanPath of orphanSidecars)try{let sidecarFileToDelete=this.app.vault.getAbstractFileByPath(orphanPath);sidecarFileToDelete instanceof import_obsidian11.TFile&&(await this.app.fileManager.trashFile(sidecarFileToDelete),actualDeletedCount++,loggerDebug(this,`Deleted orphan sidecar ${orphanPath} because: ${orphanReasons[orphanPath]}`))}catch(err){loggerWarn(this,`Error deleting orphan sidecar ${orphanPath}`,{error:err})}postDeletionCallback(actualDeletedCount),resolveOuterPromise()}).open()})}async revalidateSidecars(){loggerDebug(this,"Starting sidecar revalidation"),await this.sidecarManager.revalidateAllSidecars()}isMonitoredFile(filePath){return this.filePathService.isMonitoredFile(filePath,fp=>this.filePathService.isDerivativeFile(fp))}getSidecarPath(filePath){return this.filePathService.getSidecarPath(filePath)}isSidecarFile(filePath){return this.filePathService.isSidecarFile(filePath)}getSourcePathFromSidecar(sidecarPath){return this.filePathService.getSourcePathFromSidecar(sidecarPath)}getRedirectPath(filePath){return this.filePathService.getRedirectPath(filePath)}isRedirectFile(filePath){return this.filePathService.isRedirectFile(filePath)}isPreviewFile(filePath){return this.filePathService.isPreviewFile(filePath)}getSourcePathFromRedirect(redirectPath){return this.filePathService.getSourcePathFromRedirect(redirectPath)}getSourcePathFromPreview(previewPath){return this.filePathService.getSourcePathFromPreview(previewPath)}getPreviewPath(filePath,extension){return this.filePathService.getPreviewPath(filePath,extension)}hasRedirectFile(filePath){let redirectPath=this.getRedirectPath(filePath);return this.app.vault.getAbstractFileByPath(redirectPath)!==null}hasPreviewFile(filePath){let commonPreviewExts=["png","jpg","jpeg","gif","webp","svg"];for(let ext of commonPreviewExts){let previewPath=this.getPreviewPath(filePath,ext);if(this.app.vault.getAbstractFileByPath(previewPath)!==null)return!0}return!1}sidecarMainFileHasRedirect(sidecarPath){let mainFilePath=this.getSourcePathFromSidecar(sidecarPath);return mainFilePath?this.hasRedirectFile(mainFilePath):!1}sidecarMainFileHasPreview(sidecarPath){let mainFilePath=this.getSourcePathFromSidecar(sidecarPath);return mainFilePath?this.hasPreviewFile(mainFilePath):!1}};__name(SidecarPlugin,"SidecarPlugin");

/* nosourcemap */